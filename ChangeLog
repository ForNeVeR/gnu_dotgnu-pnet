
2003-07-12  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_emit.c: fix a warning.

2003-07-11  Richard Baumann  <biochem333@nyc.rr.com>

	* engine/lib_emit.c: implement the _IL_TypeBuilder_ClrTypeCreate
	internal call.

2003-07-11  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/md_arm.h, engine/md_x86.c, engine/md_x86.h,
	engine/unroll.c, engine/unroll_const.c, engine/unroll_ptr.c:
	implement generic unrolling for constant and pointer operations.

	* engine/md_arm.h, engine/md_x86.c, engine/md_x86.h, engine/unroll.c,
	engine/unroll_branch.c, engine/unroll_conv.c: implement generic
	unrolling for branch and conversion opcodes.

	* engine/md_arm.h, engine/unroll.c: some slight fixes for ARM.

	* engine/md_arm.h, engine/arm_codegen.h: macro expansion bugs on ARM.

	* doc/unrolling.txt: update the generic unroller documentation
	to describe all of the code generation macros.

2003-07-10  Rhys Weatherley  <rweather@southern-storm.com.au>

	* ChangeLog, doc/ChangeLog-4: move the bulk of ChangeLog into
	doc/ChangeLog-4 to trim things down a little.

	* engine/md_arm.c, engine/md_arm.h, engine/md_default.h,
	engine/md_x86.c, engine/md_x86.h, engine/unroll.c,
	engine/unroll_arith.c: add some more code to the generic unroller.

2003-07-09  Gopal.V  <gopalv82@symonds.net>
	
	* engine/lib_reflect.c: Generate arrays of the attribute type 
	instead of generating Object[] arrays .

	* engine/verify_call.c: Fix minor bug (or typo) in verification
	of the ldvirtftn.

2003-07-09  Thong Nguyen  <tum@veridicus.com>

	* engine/thread.c, engine/process.c: Fix bug that caused the
	finalizer to destroy the main thread even though if
	ILProcessDestroy has already destroyed it.

2003-07-09  Rhys Weatherley  <rweather@southern-storm.com.au>

	* ilalink/link_main.c, ilalink/link_res.c, image/Makefile.am,
	image/image.h, image/winres_reader.c, image/winres_writer.c,
	include/il_linker.h, include/il_writer.h: put some of the
	support code in place for writing win32 resources and icons
	(not complete yet).

	* cscc/c/c_grammar.y: add some "error" declarations to the
	C grammar to improve error handling in the parser.

2003-07-08  Thong Nguyen  <tum@veridicus.com>

	* tests/test_thread.c: Made the test GC aware because
	on windows, threads go through the GC.
	
2003-07-08  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/common/cc_preproc.c: Modify to ignore escape sequences in
	literal strings.
	
2003-07-08  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/cvm_inline.c: use ILExecThreadCallVirtualV instead
	of ILExecThreadCallVirtual for the StringBuilder.Append
	inline because the va_list packing code doesn't work on
	PPC GNU/Linux.

	* engine/ilrun.c: modify "ilrun" to avoid va_list's also.

	* cscc/common/cc_compat.c, image/winres_reader.c, include/il_system.h,
	support/strings.c: add "ILStrNICmp" as a common support function.

2003-07-08  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_thread.c: Monitor speed improvements.  Prevent
	multiple threads from claiming the same monitor into their
	free lists.
	
	* include/il_thread.h, support/thr_defs.h, support/thread.c:
	Add support for registering thread cleanup handlers.
	
	* support/thread.c: Fix race condition bug in ILThreadJoin
	by reordering the ILWakeupSetLimit, _ILWakeupQueueAdd and
	_ILMutexLock calls.  This race condition would cause 
	ILThreadJoin to miss a signal and deadlock.
	
	* engine/engine.h: Added "isFinalizerThread" field to ILExecThread
	so finalizer threads can be treated specially when the process
	shutsdown.
	
	* engine/heap.c: Object finalizers are now responsible for
	registering the finalizer thread with the engine.

	* engine/process.c: On process shutdown, non-finalizer threads
	(both foreground and background) are now destroyed before the
	finalization thread performs its last run.
	
	* support/hb_gc: Improve startup time by delay-creating the
	finalizer thread.  Decoupled the GC code from the engine so that
	it needs to know nothing about the execution engine.  Added more
	comments.
	
	* support/thread.c: Add support for thread cleanup handlers.

2003-07-07  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/Makefile.am, image/image.h, image/pecoff_loader.c,
	image/winres_reader.c, include/il_image.h: add code to "image"
	to read the contents of the ".rsrc" section in an IL binary.

2003-07-07  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/csharp/cs_gather.c: Fully generate class members before
	generating nested classes.

2003-07-07  Thong Nguyen <tum@veridicus.com>
	
	* support/wakeup.c: Prevent ILWakeupWait from waiting on the
	condvar if the wakeup object is already at its limit to fix
	a race condition that can occur if wakeup objects are registered
	& subsequently signalled before ILWakeupWait is called.
		
2003-07-06  Thong Nguyen <tum@veridicus.com>

	* engine/lib_thread.c: Fixed monitor locking mismatch bug under
	Linux.
	
	* libgc/linux_threads.c: Fixed bug where pthread_create blocks
	instead of returning when thread creation fails.

2003-07-06  Rhys Weatherley  <rweather@southern-storm.com.au>

	* Makefile.am, configure.in, ilranlib/.cvsignore,
	ilranlib/Makefile.am, ilranlib/ilranlib.1, ilranlib/ilranlib.c:
	add the "ilranlib" program to the system.

	* cscc/Makefile.am, ilranlib/Makefile.am, ilsize/Makefile.am,
	ilstrip/Makefile.am: add some symlinks to make the IL tools
	look like a cross-compile toolchain with the prefix "cli-unknown".

	* configure.in, ilranlib/Makefile.am: locate the system version
	of "ar" and link it as "cli-unknown-ar".

2003-07-05  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_thread.c: Implemented internal calls Thread.Abort
	& Reset.  Fix for resource leak that occurs when threads are
	collected without ever starting.
	
	* engine/engine.h, engine/thread.c: Renamed a few fields to be
	more consistant.
	
	* support/thread.c: Changed ILThreads so that the underlying OS
	thread is not created until start is called.  ILThreadRun now 
	starts immediately rather than suspending until start is called.
	
	* libgc/win32_threads.c:  Changed MAX_THREADS to 1024.
	
	* engine/process.c, engine/thread.c, support/hb_gc.c,
	support/thread.c: Moved background threads support down to
	the "ILThread" level rather than the "ILExecThread" level.
	
	* libgc/win32_threads.c, libgc/configure.in, libgc/include/gc.h:
	Fix so that GC_CreateThread gets registered with the GC even if
	libgc is compiled under cygwin.
	
	* docs/libgc_changes.txt: Documents changes made to libgc.
	
2003-07-05  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_gather.c, image/member.c, include/il_program.h:
	search for the "virtual" method corresponding to an "override"
	and report a bug if one isn't present (Bug #4196); property
	signatures should never use the "hasthis" flag, as it is stored
	on the underlying accessor methods instead.

	* codegen/cg_gen.c, codegen/cg_gen.h, codegen/cg_nodemap.c,
	codegen/cg_nodemap.h, cscc/csharp/cs_cast.tc, cscc/csharp/cs_oper.tc:
	fix bug #4197 - "unchecked" is required for numeric constant
	casts such as "uint" to "int".

	* Makefile.am, configure.in, ilstrip/.cvsignore, ilstrip/Makefile.am,
	ilstrip/ilstrip.1, ilstrip/ilstrip.c: add the "ilstrip" program.

	* engine/convert.c, engine/cvm.c, engine/engine.h: lock out
	the method cache while the unroller is running.

2003-07-04  Gopal.V  <gopalv82@symonds.net>
	
	* include/il_sysio.h, support/socket.c: Partially implelement the 
	socket options.

2003-07-04  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/class.c (ILClassCreate): forcibly change TypeRef tokens
	into TypeDef tokens (fixes Bug #4107).

2003-07-03  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_grammar.y: make the C compiler more robust against
	failures of "CTypeDefineStructOrUnion".

	* cscc/c_main.c: quote cpp arguments that contain spaces on MacOS X.

	* cscc/cscc.c (IsSinglePlugin): single-file plugins end in "-s",
	not ".s".

	* cscc/c/c_oper.tc (ILNode_Conditional): handle function pointers
	as arguments to "?:".

	* cscc/c/c_ainit.tc, cscc/c/c_grammar.y: treat "union" initializers
	the same as "struct" initializers.

	* cscc/cscc.c, ilalink/link_main.c: change the default output
	file from "a.out.exe" to "a.exe" (Win32) or "a.out" (non-Win32),
	to be consistent with gcc.

	* image/pecoff_writer.c (_ILWriteFinal): move the ".ildebug"
	section to the end of the image so that it can be easily stripped.

2007-07-03  Thong Nguyen  <tum@veridicus.com>

	* support/hb_gc.c: ILGCDeinit now performs a garbage collection
	before calling the finalizers one last time.
	
	* engine/process.c: ILProcessDestroy now relies on ILGCDeinit
	to run final GC and finalization run.

2003-07-01  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/java/java_grammar.y: wrap For statements in a new scope
	(fixes bug #4127)

2003-07-01  Rhys Weatherley  <rweather@southern-storm.com.au>

	* doc/c_users_guide.html: update the user's guide for the C
	compiler to describe the latest conventions.

	* ilheader/ilheader.c: modify the "ilheader" program so
	that it only outputs the type definitions, because the
	methods, fields, etc, can be accessed via other means.

	* cscc/c/c_grammar.y, cscc/c/c_scanner.l: remove the "__invoke__"
	keyword from the C compiler, because it is no longer required.

2003-07-01  Thong Nguyen  <tum@veridicus.com>
	
	* engine/heap.c:  Make ILExecAllocAtomic registers finalizers.
	
	* support/time.c:  Map timezone to _timezone on windows builds.
	
	* support/hb_gc.c:  Prevent the finalizer thread from
	recursively calling finalizers.
	
2003-06-30  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_grammar.y, cscc/c/c_scanner.l: add "type::name" syntax
	to the C compiler, to replace the clumsy "__invoke__ type.name".

2003-06-30  Jeff Post  <j_post@pacbell.net>

	* csdoc/doc_html.c: add code to generate href links to the
	output of cssrc2html.

2003-06-30  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_thread.c: Fix argument exception instead of
	SyncLockException thrown.
	
	* engine/cvm_inline.c: Monitor.Enter and Monitor.Exit now
	properly save/restore the stack state.  Fixes case where
	exceptions not always thrown.
	
2003-06-29  Thong Nguyen  <tum@veridicus.com>

	* configure.in: Made gcc threading model detected occur only if
	the system isn't windows or linux (windows and linux have default
	forced threading models).
	
	* engine/layout.c: Fixed bug so that classes that don't implement
	interfaces nor have static fields are properly identified as
	managed or unmanaged.  

	* engine/method_cache.c: work around compilers that don't allow
	arithmetic on void * pointers.

	* support/thr_choose.h: make sure that CreateThread is redirected
	to GC_CreateThread under all Win32 environments, because the
	static library won't properly attach otherwise.

	* support/hb_gc.h: Refactored some code.  Finalizers now always halt
	the current thread.

2003-06-28  Rhys Weatherley  <rweather@southern-storm.com.au>

	* configure.in: add "mingw" to the set of detected platforms
	for Win32 threading support.

	* engine/cvm_ptr.c, engine/engine.h, engine/heap.c, engine/layout.c:
	use "_ILEngineAllocAtomic" to allocate objects that don't have any
	GC'able fields, to prevent the GC from scanning the large static
	data areas in C applications, which rarely include managed types.

	* cscc/c/c_grammar.y: recognise "__const__" as an attribute name,
	to compile code that uses glibc headers.

	* cscc/c/c_types.c: clone bit-field declarations when a struct
	type is cloned.

	* cscc/c/c_declspec.h, cscc/c/c_grammar.y: inhibit the "useless
	keyword" warning for anonymous enumerations.

	* ilalink/link_main.c: strip multiple "/" characters from the end
	of "ar" entry names because some archives have a "//" entry.

	* cscc/c/c_ainit.tc, cscc/c/c_const.tc, cscc/c/c_defs.tc,
	cscc/c/c_grammar.y, cscc/c/c_lexutils.c, cscc/c/c_scanner.l,
	cscc/c/c_types.c, cscc/c/c_types.h: add support for wide character
	and wide string constants.

	* cscc/c/c_internal.c (CGenSizeOf): the boxed form of "long double"
	is "OpenSystem.C.LongDouble", not "OpenSystem.C.NativeFloat".

	* cscc/c/c_oper.tc (ILNode_SizeOfExpr): special "sizeof" cases
	for calculating the size of string constants.

2003-06-27  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_gather.c, cscc/csharp/cs_internal.h,
	cscc/csharp/cs_modifiers.c: report errors for "Finalize" methods
	that are not properly declared as constructors (Bug #4062).

	* engine/lib_dir.c, engine/lib_file.c, include/il_engine.h:
	convert '\' into '/' in pathnames to work around Windows programmers
	who don't use "Path.DirectorySeparatorChar" in their C# code.

	* cscc/c/c_ainit.tc (CArrayInitializerSize): further improvements
	to array size computation - handle nested structs within structs, etc.

	* cscc/c/c_ainit.tc, cscc/c/c_defs.tc, cscc/c/c_grammar.y,
	cscc/c/c_oper.tc: rearrange the array initialization code so that
	all code generation and semantic analysis is in "c_ainit.tc".

	* cscc/c/c_function.c, cscc/c/c_function.h, cscc/c/c_grammar.y,
	ilalink/link_class.c, ilalink/link_init.c: force the ".init"
	function to be called when a C library is used from a C#
	application which doesn't use the crt0 process.

	* doc/c_language_abi.html: update the ABI specification for the
	C compiler to match the latest changes.

	* cscc/c/c_ainit.tc, cscc/c/c_builtin.tc, cscc/c/c_defs.tc:
	initialization of arrays containing strings (e.g. char[] x = "abc").

	* cscc/c/c_ainit.tc: finish the implementation of array and
	structure initializers.

2003-06-27  Thong Nguyen <tum@veridicus.com>

	* support/wait_mutex.c: Fix recursive entry/leave bug in
	  ILWaitMonitorSpeculativeLeave/CompleteLeave.

	* engine/monitor.c: Added implementation of SetObjectMonitor for
	  hashing monitors.

2003-06-26  Gopal.V  <gopalv82@symonds.net>
	
	* engine/Makefile.a: Add monitor.c to the list of files

	* cscc/common/cc_options.c: Add a "--version" command line 
	option to cscc.

2003-06-26  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_thread.c:  New monitor implementation.  Uses 
	thread local free monitor lists instead of GC.  This allows 
	monitors to be used with objects using GC "atomic" memory 
	regions (type of memory used by arrays and strings).

	* engine/ilrun.c, engine/process.c, engine/thread.c: New code to 
	prevent the process from exiting until all user threads have 
	finished executing.

	* engine/Makefile.am: Added monitor.c

	* engine/cvm_inline.c:	Added support for inlining Monitor.Enter
	and Monitor.Exit.

	* engine.h:  Added support for engine level monitors and 
	preliminary hashing monitors support.

	* engine/heap.c:  Add support fo abstracted object headers.
	Add support code to allow finalizers to run from finalizer 
	thread.

	* engine/int_proto.h, engine/int_table.h:  New internal method 
	imports for threading support.

	* engine/lib_defs.h:  Support macros for abstracting object 
	headers.  Support code for header and hash based monitors.

	* engine/lib_gc.c:  Changed code to support abstracted object 
	headers.

	* engine/lib_thread.c:  Implemented threading internal methods
	(Thread.Start etc). Implemented monitor support.  Added new 
	internal method InitializeThread.

	* engine/process.c:  Call to the new ILGCDeinit function.

	* engine/thread.c:  Implemented a couple more threading related 
	methods. GetCurrentClrThread and ILThreadRegisterForManagedExcution.
	
	* engine/monitor.c:  Implemention of memory saving hashing 
	monitors.

	* include/il_engine.h:  Added typedef for ILExecMonitor.

	* include/il_gc.h:  Added ILGCDeinit and and
	ILGCRegisterGeneralWeak.
	
	* include/il_thread.h:  IThreadRegisterForManaged  declaraction.

	* support/def_gc.h:  Added null implementations of new GC 
	methods.

	* support/hb_gc.c:  Moved GC finalizer into a seperate thread.
	Added waiting for pending finalizer support.  Implemented
	various new threading related methods (GCDeinit etc).
	(Patch #1657, Gopal)  

2003-06-26  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_lvalue.tc (ILNode_CDeref): decay array types in the
	result of the '*' operator.

	* cscc/c/c_types.c (CloneStruct): copy an entire field's type,
	including the modifier prefixes.

	* cscc/c/c_typeout.c (OutputPendingClass): don't output class
	references, as they aren't defined in the current module.

	* cscc/c/c_grammar.y, cscc/c/c_types.c, cscc/c/c_types.h:
	resolve anonymous enumerated types and constants to the
	underlying type because there is no way to define an
	enumerated type that will work across modules otherwise.

	* cscc/c/Makefile.am, cscc/c/c_ainit.tc, cscc/c/c_defs.tc,
	cscc/c/c_grammar.y, cscc/c/c_internal.h, cscc/c/c_lvalue.tc,
	cscc/c/c_oper.tc, cscc/c/c_stubs.tc, cscc/c/c_types.c,
	cscc/c/c_types.h: move the array initializer node types into
	"c_ainit.tc"; implement a better algorithm for calculating
	the size of an array initializer.

	* support/hb_gc.c: missing return value.

	* engine/lib_defs.h: make the object header access macros 64-bit safe.

	* engine/cvm_except.c, engine/throw.c: add the stack trace to
	exception objects that are created by "ILExecThreadThrowSystem".

	* engine/engine.h, engine/thread.c: fix some prototyping bugs.

2003-06-25  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_function.c, cscc/c/c_grammar.y: implement global
	initializer flushing in the C compiler.

	* cscc/c/c_grammar.y, ilalink/Makefile.am, ilalink/link_create.c,
	ilalink/link_image.c, ilalink/link_init.c, ilalink/link_library.c,
	ilalink/linker.h: link initializers and finalizers in C applications.

	* cscc/c/c_lvalue.tc (ILNode_CDeref): remove the '*' dereference
	layer if the argument is a function pointer, so that "(*f)()" works.

	* cscc/c/c_oper.tc (ILNode_Conditional): error in semantic analysis
	for the third sub-expression of "?:".

	* cscc/c/c_oper.tc (ILNode_CastType): it is always possible to
	cast to "void" in C.

	* cscc/c/c_grammar.y: permit "register" to be used in a
	formal parameter list.

	* cscc/c/c_types.c (CTypeGetElemType): preserve function pointer
	modifiers when dereferencing an array of function pointers.

	* codegen/cg_decls.tc, codegen/cg_nodes.tc, cscc/csharp/cs_decls.tc,
	cscc/csharp/cs_grammar.y, doc/c_users_guide.html: introduce some
	new syntax to make it easier to call C code from C#.

2003-06-24  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/java/.cvsignore, cscc/bf/.cvsignore : add generated
	files to .cvsignore to avoid being generated as a patch.

2003-06-24  Rhys Weatherley  <rweather@southern-storm.com.au>

	* support/dynlib.c: use the "LoadLibrary" function under both
	cygwin and non-cygwin win32 installations.

2003-06-24  Jeff Post  <j_post@pacbell.net>

	* csdoc/Makefile.am, csdoc/cssrc2html.c, csdoc/cssrc2html.h,
	csdoc/fontcolors.c, csdoc/fontcolors.h, csdoc/scanner.c,
	csdoc/scanner.h, csdoc/tokens.h: add the "cssrc2html" program
	to the tree.

2003-06-23  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/common/cc_options.c, cscc/cscc.1 , doc/pnettools.texi: Add
	a new "-winforms" option to simplify compiling WinForms applications.

	* cscc/vb/vb_grammar.y: Fix error with Bison 1.75

	* cscc/java/java_grammar.y: Fix error with Bison 1.75
	
	* cscc/java/java_grammar.y: Fixed another error with Bison 1.75

2003-06-23  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/class.c, image/context.c: fix a scope bug in class name
	lookup - it was sometimes finding nested classes when looking
	for global ones.

2003-06-22  Yannis Bres  <Yannis.BRES@sophia.inria.fr>

	* engine/cvmc.c, engine/ilrun.c, engine/method_cache.c,
	engine/method_cache.h, engine/null_coder.c, engine/process.c,
	ildb/ildb_run.c, include/il_coder.h, include/il_engine.h: Add 
	the '-C' option to control the size of the converted method cache.
	(Gopal, Patch #1643 and fixes Bug #1014)

2003-06-22  Gopal.V  <gopalv82@symonds.net>

	* codegen/cg_coerce.c: Fix indirect casting to use a 3 step conversion
	instead of obtaining rules.

	* engine/ilrun.c: Explicitly call the static constructor of the class
	containing the entry point function. (fixes Bug #3593)
	
2003-06-22  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/process.c (ILExecProcessDestroy): run a final garbage
	collection and finalizer pass just before engine shutdown.

	* csdoc/doc_tree.h, engine/lib_string.c, ilalink/link_library.c,
	image/image.h, support/hashtab.c, support/intern.c: adjust some
	hash table sizes to be prime numbers rather than powers of two,
	to help spread items more evenly across the table.

2003-06-21  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/cs_main.c , cscc/csharp/cs_scanner.l , cscc/csharp/cs_internal.h:
	Use CSLatin1Charset to detect the -flatin1-charset option in cs_main.

2003-06-21  Thong Nguen  <tum@veridicus.com>

	* engine/lib_enum.c: fixed bug where flag enums don't return correct
	string format if the enum value matches exactly one value.

	* support/thread.c: fixed bug where ILThreadJoin incorrectly evaluates
	state of the thread to join.

2003-06-21  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_info.c:
	add the "InfoMethods.GetPlatformID" internalcall.

	* libffi/src/x86/sysv.S, libffi/src/x86/win32.S: make the x86 libffi
	code more robust in the face of callee-pop winapi conventions.

	* codegen/cg_cast.tc: fix incorrect code generation for
	casting "uint" to "byte".

2003-06-20  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/cvm.h: duplicate opcode value where it shouldn't be.

	* ilalink/link_library.c (ClassHash_Match): resolve nested types
	properly in the linker, so that if the same nested type name is used
	in two contexts, it will find the right context.

2003-06-19  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/verify.c: enable the verifier's debug mode by default.

	* engine/cvm.h, engine/cvm_call.c, engine/cvm_dasm.c,
	engine/cvm_lengths.c, engine/cvmc.c, engine/cvmc_call.c,
	engine/null_coder.c, engine/verify.c, engine/verify_call.c,
	include/il_coder.h: re-implement tail calls in the verifier,
	coder, and interpreter.

2003-06-17  Rhys Weatherley  <rweather@southern-storm.com.au>

	* support/dynlib.c: put the MacOS X version of dynamic loading
	before the generic "dlopen" version, as some MacOS X systems
	have "dlopen", but it doesn't do the right thing.

	* csant/csant_dir.c, cscc/bf/bf_grammar.y, engine/lib_math.c,
	engine/lib_socket.c, ildb/ildb_input.c, support/allocate.c,
	support/dns.c, support/dynlib.c, support/filemap.c,
	support/socket.c, support/test_float.c: #include fixes for
	non-cygwin win32 builds.

	* support/dns.c: #include fix for cygwin win32 builds.

	* configure.in, support/dns.c: detect sin6_scope_id because some
	older OS'es don't have it in struct sockaddr_in6.

	* NEWS, configure.in: update version for the "0.5.8" release.

	* configure.in: update working version to "0.5.9".

	* engine/lib_reflect.c: closures are not available if libffi
	is disabled.
