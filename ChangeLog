
2001-08-27  Rhys Weatherley  <rweather@southern-storm.com.au>

* codegen/cg_scope.h, codegen/cg_scope.c: add node information to all
scope items to assist with error-reporting, plus local variable declarations.

* codegen/cg_nodes.tc: new fields for NewScope, MethodDeclaration, etc.

* codegen/cg_gen.h, codegen/cg_gen.c: add "currentClass" and "currentMethod"
to "ILGenInfo", convert local variables into temporary variables.

* codegen/cg_stmt.tc, codegen/jv_stmt.tc: code generation for local
variables, plus a minor bug in "ILNode_Compound_CreateFrom".

* codegen/cg_decls.tc: change VarDeclarator to FieldDeclarator, rearrange
method code generator, output local variables.

* codegen/jv_decls.tc: change VarDeclarator to FieldDeclarator.

* cscc/cs_lvalue.tc: change scopes in semantic analysis for NewScope.

* cscc/cs_gather.c: change VarDeclarator to FieldDeclarator, new calling
conventions for ILScopeDeclareMember.

* cscc/cs_decls.tc: change VarDeclarator to FieldDeclarator, keep track of the
current class or method that is being processed.

* cscc/cs_stmt.tc: semantic analysis for local variable declarations.

* cscc/cs_grammar.y: separate field and local variable declarators, wrap
"Block" in a "NewScope" node, empty constructors should not be NULL.

* cscc/cs_internal.h: add the "CS_LOCAL_IS_ARG" flag bit.

* codegen/cg_utils.h, codegen/cg_utils.c: implement utility functions
for accessing method arguments.

* cscc/cs_decls.tc (ILNode_MethodDeclaration): declare parameters into
the method's local variable scope.

* cscc/cs_stmt.tc: implement semantic analysis for return statements.

* codegen/cg_nodes.tc, codegen/cg_lvalue.tc, codegen/jv_lvalue.tc:
implement the "LocalVar" and "ArgumentVar" nodes.

* cscc/cs_lvalue.tc: recognise local variables during semantic analysis
of identifiers, plus semantic analysis for "this".

2001-08-25  Rhys Weatherley  <rweather@southern-storm.com.au>

* codegen/cg_nodes.tc, codegen/cg_misc.tc, codegen/jv_misc.tc: add the
"trueMethod" and "falseMethod" fields to "ILNode_ToBool", to support
user-defined boolean conversions.  Update the "ILNode_ToBool" code
generators to use these fields.

* cscc/cs_semantics.tc: implement the helper functions "CSSemType",
"CSSemTypeVoid", and "CSSemExpectValue" to help with semantic analysis.

* cscc/cs_gather.c: change the semantic analysis for types to use the
new helper functions.

* cscc/cs_errors.c: never allow unsafe constructs when the output is Java.

* cscc/cs_oper.tc: implement semantic analysis for "ILNode_ToBool".

* cscc/cs_grammar.y, cscc/cs_defs.tc, cscc/cs_types.tc, cscc/cs_stmt.tc:
convert "void" into a full-class builtin type to simplify the grammar and
type handling.  Implement unsafe statement blocks.

2001-08-24  Rhys Weatherley  <rweather@southern-storm.com.au>

* cscc/cs_main.c (main): turn on the "semAnalysis" flag during type
gathering and semantic analysis, don't generate code if semantic analysis
fails, and add a new "-fsemantic-check" option.

* cscc/cscc.1, doc/pnettools.texi: document "-fsemantic-check".

* codegen/cg_scope.h, codegen/cg_scope.c: declare class members in scopes.

* codegen/cg_gen.h, codegen/cg_gen.c (ILTypeToMachineType): new function.

* dumpasm/dump_type.c (DumpParamMarshal): dump parameter names.

* cscc/cg_stmt.tc (ILNodeEndsInReturn): new function to detect when a
statement list ends in a return statement.

* codegen/cg_decls.tc, codegen/cg_nodes.tc, cscc/cs_decls.tc,
cscc/cs_gather.c, cscc/cs_grammar.y: semantic analysis and code
generation routines for method and field signatures.

* codegen/cg_nodes.tc (ILNode_PropertyDeclaration): add ILMethod* fields
for the declarations of property get and set methods.

* codegen/cg_decls.tc (ILNode_PropertyDeclaration, MethodGenDiscard):
implement code generation for properties.  Move most of the method
generation code into "MethodGenDiscard" so that it can be reused
when dumping the get and set methods for properties.

* cscc/cs_grammar.y (AccessorBody): empty accessor bodies should be NULL,
not "MakeSimple(Empty)".

* cscc/cs_gather.c (CreateProperty): implement type gathering for properties.

* cscc/cs_decls.tc (ILNode_PropertyDeclaration): implement semantic analysis
for property declarations.

2001-08-23  Rhys Weatherley  <rweather@southern-storm.com.au>

* codegen/cg_gen.h, codegen/cg_gen.c: add "unsafeLevel" to "ILGenInfo".

* cscc/cs_decls.tc, cscc/cs_errors.c, cscc/cs_grammar.y, cscc/cs_internal.h,
cscc/cs_lvalue.tc, cscc/cs_misc.tc, cscc/cs_oper.tc, cscc/cs_stmt.tc:
move unsafe testing code out of the grammar and into the semantic
analysis routines.

* codegen/cg_nodes.tc, codegen/cg_decls.tc, codegen/jv_decls.tc: remove
unnecessary node types.

* cscc/cs_decls.tc: remove semantic analysis for unnecessary node types.

* cscc/cs_grammar.y: fix nesting level bug introduced by the new unsafe
testing code, convert interfaces into classes, and indexers into properties.

* cscc/cs_modifiers.c: remove warnings about unsafe constructs, which
are now handled in semantic analysis.

* codegen/cg_decls.tc, codegen/cg_misc.tc, codegen/cg_nodes.tc,
codegen/jv_decls.tc, codegen/jv_misc.tc, cscc/cs_decls.tc,
cscc/cs_grammar.y, cscc/cs_misc.tc: collapse ILNode_MethodHeader and
ILNode_MethodDeclaration into just ILNode_MethodDeclaration.  Also
convert constructors and destructors into specialized methods.

2001-08-22  Rhys Weatherley  <rweather@southern-storm.com.au>

* codegen/cg_gen.c (ILFindSystemType): import system library classes
into the main image.

* codegen/cg_nodes.tc, codegen/cg_decls.tc, codegen/jv_decls.tc:
remove ILNode_TypeSuffix and ILNode_LocalVariableType.

* cscc/cs_defs.tc: add ILNode_PrimitiveType, ILNode_ObjectType,
ILNode_StringType, ILNode_DecimalType, and rearrange the text a
little for clarity.

* cscc/cs_types.tc: semantic analysis for type nodes.

* cscc/cs_decls.tc: remove ILNode_TypeSuffix and ILode_LocalVariableType,
which are now in "cs_types.tc".

* cscc/cs_grammar.y: convert primitive type nodes from using qualified
identifiers to using ILNode_PrimitiveType, ILNode_ObjectType, etc.

* codegen/cg_gen.h, codegen/cg_gen.c: implement "ILClassToType" and
"ILTypeToClass".

* codegen/cg_library.c: add "System.TypedReference" to the set of
builtin library types.

* codegen/cg_scope.h, codegen/cg_scope.c: implement "ILScopeDataGet*"
to get information about scope items.

* cscc/cs_defs.tc: add new semantic kinds and change CS_SEMKIND_METHOD
into CS_SEMKIND_MEMBER.

* cscc/cs_lvalue.tc (ILNode_Identifier): implement semantic analysis.

* cscc/cs_grammar.y: convert operators into method definitions in the parser.

* codegen/cg_nodes.tc, codegen/cg_decls.tc, codegen/jv_decls.tc,
cscc/cs_decls.tc: remove obsolete operator declaration nodes.

2001-08-21  Rhys Weatherley  <rweather@southern-storm.com.au>

* engine/engine.h: add the IL_INLINE helper macro.

* tools/mkrelease: add a new option to allow builds from non-CVS sources.

2001-08-20  Rhys Weatherley  <rweather@southern-storm.com.au>

* engine/engine_private.h: new file for isolating access to "image".

* engine/thread.c: change includes to use "engine_private.h".

* engine/engine.h: add new type "ILClassPrivate".

* doc/pnetimg.texi, doc/pnettools.texi, dumpasm/dump_flags.c,
dumpasm/dump_type.c, engine/interpreter.c, ilalink/ilalink.c,
ilasm/ilasm.1, ilasm/ilasm_grammar.y, ilasm/ilasm_main.c,
ilasm/ilasm_scanner.l, ildasm/ildasm_global.c, image/assembly.c,
image/image.h, image/member.c, image/meta_build.c,
image/meta_header.c, image/meta_index.c, image/meta_writer.c,
image/opcodes.c, image/pecoff_writer.c, image/program.h,
image/test_macros.c, image/writer.c, include/il_image.h,
include/il_meta.h, include/il_opcodes.h, include/il_program.h,
include/il_writer.h: remove obsolete code related to Beta 1 support.

* doc/metadata.html: remove obsolete documentation file.

* include/il_engine.h: declare ILSizeOfType and ILExecProcessGetEntry.

* engine/layout.c: new file that implements field and method layout.

* engine/engine.h: declare _ILLayoutClass and _ILSecurityCheck.

* include/il_image.h, image/context.c: implement ILContextNextImage.

* doc/pnetimg.texi: document ILContextNextImage.

* include/il_program.h, image/class.c: implement ILClassResolve.

* image/program.h: add user data fields used by "engine/layout.c".

* image/link.c (LocateAssembly): "off by one" bug in pathname code.

* libffi: update makefiles and configuration to build "libffi.a".

* engine/Makefile.am: add "layout.c" and "libffi.a" to the build.

* engine/process.c: implement ILExecProcessGetEntry.

* engine/ilrun.c (main): call ILExecProcessGetEntry.

2001-08-17  Rhys Weatherley  <rweather@southern-storm.com.au>

* image/java_loader.c: add support for .jar files to the loader.

* ilnative/ilnative.c (printNatives): remove a previous hack that
recognised any empty method as native, and then add code to recognise
the "native" and "runtime" implementation types.

* include/il_program.h, image/test_macros.c: add the "ILMethod_IsJavaFPStruct"
and "ILMethod_IsJava" helper macros.

* ilasm/ilasm_grammar.y (Float64): remove the '[' form of floating
point constants and alter the '(' form to be ECMA-compliant.

* dumpasm/dump_ident.c (ILDumpClassName): don't add an extra class
prefix when dumping the names of nested types.

* ildasm/ildasm_method.c (DumpInstructions): modify floating point
constant code to use the '(' form instead of the '[' form.
(DumpToken, ILDAsmDumpMethod), ildasm/ildasm_internal.h: suppress the
class prefix when dumping names in catch clauses.

* doc/pnetasm.texi: update assembly syntax doc to remove references
to the '[' form of floating point constants.

* codegen/cg_output.c: change floating point constant output code
to use the '(' form.

* codegen/cg_decls.tc: avoid following parent links when dumping
parent class names.

* cscc/cscc.c (main, ProcessWithPlugin): change references to the
obsolete ".io" extension into ".obj".

* doc/pnettools.texi: update the tools doc with information on
the name mangling rules that are used when compiling to the JVM.

* codegen/jv_arith.tc, codegen/jv_assign.tc, codegen/jv_cast.tc,
codegen/jv_const.tc, codegen/jv_nodes.tc, codegen/jv_relop.tc: adjust
mangled signature names to match the new rules.

2001-08-16  Rhys Weatherley  <rweather@southern-storm.com.au>

* image/java_loader.c: implement a Java class file to IL converter.

* include/il_jopcodes.h: copy "codegen/jv_opcodes.h" to "include" directory.

* include/il_meta.h, include/il_image.h: new constants relevant to Java.

* image/pecoff_loader.c (ILImageLoad), image/image.h (_ILImageJavaLoad),
image/Makefile.am: hook the Java class loading functionality to "ILImageLoad".

* include/Makefile.am: add "il_jopcodes.h" to the "include" make.

* ildasm/ildasm_main.c (dumpFile): recognise IL_IMAGETYPE_JAVA as a
legitimate image type.

* dumpasm/dump_flags.c (ILMethodImplementationFlags): add implementation
flags that are relevant to Java class files.

* image/meta_build.c (Load_MethodDef): mask off Java-related flags
to prevent potentional security breaches.

2001-08-15  Rhys Weatherley  <rweather@southern-storm.com.au>

* codegen/cg_decls.tc, codegen/cg_misc.tc, codegen/cg_nodes.tc,
codegen/jv_decls.tc, codegen/jv_misc.tc, cscc/Makefile.am,
cscc/cs_decls.tc, cscc/cs_grammar.y, cscc/cs_misc.tc: apply a
patch from Norman Stevens <norman@arcady.u-net.com> that adds
most of the node creation functionality to the C# grammar.

* cscc/cs_decls.c, cscc/cs_ident.c: removed obsolete files.

* codegen/cg_gen.c (CreateBasicImage): build the correct "blank" image.

* codegen/cg_output.h, codegen/cg_output.c (ILGenModulesAndAssemblies),
cscc/cs_main.c (main): dump modules assemblies to the assembly stream.

* codegen/cg_scope.c (ILScopeResolveType): reverse name and namespace
arguments for library lookups, and import library classes into the
main image properly.

* codegen/cg_decls.tc (GenDiscard-ClassDefn): specify the image pointer
when dumping class names for parents and interfaces so that the correct
scope information is output.

* dumpasm/dump_ident.c (ILDumpClassName): prefix module scopes with ".module".

* doc/debug.html: removed because the text is now in "pnettools.texi".

* ilasm/ilasm.1: fixed doc bugs and moved syntax to texinfo documentation.

* doc/pnettools.texi, doc/pnetasm.texi, doc/Makefile.am: completed
translation of manpage documentation to texinfo format.

2001-08-14  Rhys Weatherley  <rweather@southern-storm.com.au>

* pnet.spec: applied patch submitted by mdaniel to create RPM spec file.

* ilfind/ilfind.1: removed mention of '-V', which isn't supported.

* cscc/cscc.1: added a description of the "__JVM__" macro, moved
plug-in section completely to the texinfo documentation, and added
the "-mjvm" option.

* doc/texinfo.tex: added to support texinfo documentation make's.

* doc/pnettools.texi: first draft documentation for all development tools.

* configure.in, Makefile.am, doc/Makefile.am: makefile changes to build
texinfo documentation.
