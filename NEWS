
0.3.6 (11 May 2002)

	Runtime engine:

	* Implement "pread_this" and "pwrite_this" CVM instructions to
	  speed up common field access operations.
	* Method profiling.
	* Recognise invalid program entry points.
	* Semantic analysis and code generation for the array "new" operator.
	* Stub "Reflection.Emit" internalcalls.
	* Make sure that "ilverify" loads the assembly dependencies.
	* Insert stack traces into exception objects that are created
	  by the engine.
	* Implement stack resizing and overflow checks (Jonathan Springer).
	* Internalcalls for "ArgIterator" and "TypedReference".
	* Wrong pointer used to get field names in "Enum.GetEnumName".

	C# Compiler:

	* Compile against the correct system library (builtin vs pnetlib).
	* Correct handling of "beforefieldinit" on classes.
	* Output the correct security attributes to mark assemblies as "unsafe".
	* Do not insert coercions into the result type of an operator.
	* Don't call "yyerrok" at EOF, because it will cause an infinite loop.
	* Recognise "ThrowExpr" and "LineInfo" as "return" statements.
	* Add extra scope nodes to handle local variables with the same
	  name in different lexical contexts.
	* Begin semantic analysis for attributes (not yet complete).
	* Non-static field initializers.
	* Code generation for "ref" and "out" argument variables.
	* New keywords to be compatible with features of Microsoft's C# compiler:
	  "__arglist", "__makeref", "__reftype", and "__refvalue".
	* Improve method, field, and property handling for value types.
	* Semantic analysis for the array case of "foreach".
	* Add the "-fsave-asm" option to assist with debugging.
	* Do not generate branch instructions at the end of a "then" case
	  that ends in a "return" statement.
	* Reversed test in code generation for "!".

	Documentation and Samples:

	* csdoc2test: create test stubs from ECMA documentation (Gopal V).
	* csdocvalil: process multiple "-fimage" options.
	* engine/HACKING: document the engine architecture more fully.
	* codepage.cs: add command-line options to dump the contents
	  of a code page.
	* csdoc: bug fixes to XML output generation.

	Linker:

	* Fix linking of synthetic types.

	Loader and Metadata:

	* Scan up the class hierarchy when resolving MemberRef's for "base.X"
	  expressions.
	* Resolve the class before determining if it is enumerated or a delegate.
	* Bug fix to ILWriterTextWrite that caused invalid data to be written.
	* Fix attribute parsing in "ser_parse.c".
	* Recognise builtin attribute like "DllImport", "MarshalAs", etc, and
	  convert them into the proper metadata definitions (not linked into
	  the compiler yet).

	Platform Support:

	* Begin adding threading primitives to "support" (not linked into
	  the engine yet).
	* Implement "Socket.Select" (Charlie Carnow).
	* Print an error when a child process exits with a signal to catch
	  SEGV's within the compiler toolchain.
	* Make the socket code use a consistent address format.

	Other:

	* csant: pass "/noconfig" to csc to stop it linking in the Microsoft
	  "System.dll" and "System.Xml.dll" assemblies instead of ours.
	* Rename source files with duplicate names to get around problems
	  with setting breakpoints in gdb.
	* libgc: fix a Win32-ism that was affecting Cygwin builds.
	* libffi: update to latest version from gcc CVS tree.

0.3.4 (20 April 2002)

	Runtime engine:

	* Auto-generate the "internalcall" tables using "ilinternal".
	* Complete "binfmt" kernel registration code.
	* New method cache.
	* Modify call and exception instructions to accomodate
	  the method cache changes.
	* Integrate debug line number support into the engine.
	* Pass debug offset and line number information to pnetlib
	  for use in stack traces.
	* Implemented internalcall's for "ClrResourceStream", "SocketMethods",
	  "DefaultEncoding", "Array", "Assembly", "Type".
	* Manifest resources and files.
	* Properly initialize the locale on entry to "ilrun".
	* Detect the code page that corresponds to libc's locale.
	* Verifier fixes to "switch" and "newobj".
	* Additional CVM and verifier debug code.
	* Use the underlying type of an enumeration to load and store locals
	  with CVM instructions.
	* Fix the stack arrangement when internal exceptions are thrown.
	* Implement a better policy for deciding whether an assembly is allowed
	  to use security-senstivie features such as internalcall, PInvoke,
	  manifest files, etc.
	* Fix the interface lookup code in "call.c" when the interface is
	  implemented by a parent of the current class.
	* Add the new CVM instruction "type_from_handle" to inline calls
	  to "Type.GetTypeFromHandle".
	* Implement CVM instruction profiling to help study engine performance.

	C# Compiler:

	* Additional debug line number information.
	* Fixes to operator overloading for "IntPtr" and "UIntPtr".
	* Remove a shift/reduce conflict in "ArrayInitializer" related
	  to trailing commas.

	Documentation and Samples:

	* Updated FAQ.
	* Embed XML documentation into the CVM interpreter for all
	  CVM instructions.
	* Add a Python script to convert the CVM XML into HTML (Gopal V).
	* Added "samples/except.cs" to demonstrate exception stack traces.
	* Added "samples/codepage.cs" to demonstrate code page handling.
	* Changes to the documentation stub generator (Gopal V).

	Assembler:

	* Handle debug line number information.

	Debugger:

	* Help system works.
	* Simple gdb-like commands for xxgdb integration.

	Linker:

	* Align RVA's during exception block linking.

	Loader and Metadata:

	* Debug reading and writing support.
	* Manifest file support.
	* On-demand loading of images by assembly name.

	Other:

	* Integrated sources for libgc version 6.1alpha4.
	* Minor tweaks to the automake/autoconf build system.
	* Added an "init.d" script to "doc" - contributed by Gopal V.
	* Fixes to "csant" to handle multiple resource files with "csc".
	* Added a "--public-only" option to "ilfind" to assist pnetlib builds.
	* Add maintainer mode to the autoconf system to work around
	  autotools version problems.

0.3.2 (27 March 2002)

	Runtime engine:

	* InternalCall methods for "Platform.FileMethods" (Gopal.V, Charlie.C,
	  and Rhys.W).
	* Add binfmt registration and unregistration code.

	C# Compiler:

	* Remove a floating-point recognition case from the lexer because
	  it was confusing the parser, and because it wasn't standard.
	* Always favour non-params cases of methods when resolving candidates.
	* Coerce the "this" parameter to method invocations properly.
	* Rearrange the "cscc" directory to separate common code, plug-in
	  handling, and the C#-specific pieces of the compiler.
	* Implement Java-style labelled loops and switches in the code generator.
	* Collect up static constructor fragments for each class.
	* Add non-literal field initializers to static constructors.
	* Array initializers.
	* Detect duplicate definitions of methods and properties.
	* Type gathering for nested types.
	* Check for interface implementation errors in source programs.
	* Set the "override" flag on finalizers.
	* Modify name resultion so that a field declaration of the form
	  "T T" will be treated propertly.
	* Check for correct use of "abstract" and "extern".
	* Fix line numbers on declaration nodes so that errors are reported
	  for the first line of a declaration, not the last.
	* Always look for declared types in the program before the libraries,
	  just in case the program overrides a library type.
	* Add the "-fmetadata-only" option to the compiler.
	* Implement builtin operators for enumerated types.
	* Pass "-ftarget-assembly-name" and "-fstdlib-name" to all tools.

	Documentation:

	* Updates to "engine/HACKING" (Gopal.V).
	* Document the location of CVS snapshots in "HACKING".
	* New "csdoc2stub" program to generate C# stub classes (Gopal.V).

	Assembler:

	* Syntax changes to support Java bytecode.
	* Implement the ".data" directive to support array initializers.
	* Handle classes with no explicit parent correctly.

	Disassembler:

	* Java method body support.

	Linker:

	* Add the missing "--no-stdlib" option.
	* Bug fixes to attribute linking.

	Loader and Metadata:

	* Improve the Java class loader.
	* New functions to support interface method searches.
	* New functions for accessing user data on "ILClass" objects.

	Other:

	* Type comparison fixes in "ildiff" (Gopal.V).
	* New "ilcheck" program for checking for missing InternalCalls (Gopal.V).
	* Csant fixes to make it capable of building pnetlib.

0.3.0 (11 February 2002)

	Runtime engine:

	* Implement native methods for "Platform.TaskMethods" and
	  "Platform.DirMethods".
	* Bug fixes for the CVM "switch" instruction.
	* Bugs in "ldarg" and "ldloc" when "byref" types were present.
	* Fix the implementation of "String.Replace".
	* Bug in the CVM "return_n" instruction which caused it to
	  return the wrong stack words.

	C# Compiler:

	* Lexer fixes for identifiers, verbatim string literals, hexadecimal
	  characters, octal characters.
	* Add the "volatile" field modifier.
	* Validate the type of initialization expressions against constants.
	* Fixes to the representation of constant blobs.
	* Store decimal constants as "DecimalConstantAttribute".
	* Update the pre-processor's condition syntax to match the latest
	  C# language specification.
	* Various fixes to the pre-processor directives.
	* Expand constant fields inline.
	* Compilation of properties, fields, casts, increment, decrement,
	  "as", "is", "new", "typeof", "switch".
	* Parser fixes for events, modifiers.
	* Duplicate testing for fields, enumerated constants, and properties.
	* Improve the coercion and cast API's to allow for subsetting.
	* Implement more implicit and explicit conversions.
	* Convert between Java and C# string objects where required.
	* Default constructors.
	* Use the values of literal constant fields during type gathering.
	* Array access operators.
	* Filter method groups to remove methods in base classes with
	  identical signatures.
	* Indexers.
	* Fixes to interface declarations.
	* Synchronous delegates.
	* Bug fixes to string equality and inequality handling.
	* Optimise checks of strings against "null" to use reference testing
	  instead of operator calls.
	* Report errors when instance members are accessed from static members.

	Documentation:

	* Add the top-level HACKING file to the tree.

	Assembler:

	* Add the "nullref" field initializer.

	Linker:

	* Fix forward references to methods and fields.
	* Make sure that the converted type is used in method and field
	  comparisons, not the original type.

	Loader and Metadata:

	* Ignore PE/COFF sections that are zero bytes in size when
	  calculating minimum and maximum addresses ranges.
	* Make the "il_types.h" API more opaque, and implement several new
	  helper functions that are useful for the compiler.

	Other:

	* New helper functions for UTF-8 and UTF-16 string processing.
	* More portability fixes for Solaris 8.
	* Change all tools to output help message to stdout instead of
	  stderr, to be consistent with the GNU Coding Standards.
	* Alter the Fibonacci example, and add the "getenv" example.
	* Implement the missing "ILDecimalFromDouble" function.

0.2.8 (7 January 2002)

	Runtime engine:

	* Updates to the internalcall methods to match changes to pnetlib.
	* Implement the reflection API's.
	* Implement array cloning properly in "Object.MemberwiseClone".
	* Method invocation via reflection to support unit testing in pnetlib.
	* Fix the status handling for "Main": it used to think that an
	  exception was thrown sometimes when it wasn't.
	* The range for exception blocks was incorrect in the bytecode verifier.
	* Throw a "missing method" exception when the verifier fails.

	C# Compiler:

	* Fix a shift/reduce conflict in the grammar which caused it to
	  complain about casts to array types.
	* Insert the "%split" keyword into the treecc definitions where
	  large operations may otherwise cause gcc 3.0 to crash.

	Documentation:

	* Parse and format excluded base types in the ECMA specification.
	* Implement "csdocvalil", to validate pnetlib against the ECMA spec.
	  Output formats are text and XML.

	Other:

	* Terminology changes in the README to make it FSF-compatible.
	* Implement the MD5 and SHA1 hash algorithms.
	* Modify GUID generation to redistribute entropy using SHA1.
	* Turn off HAVE_CONFIG_H prior to including readline headers,
	  to prevent confusion.
	* Configuration updates to detect the thread model similarly to libgc.
	* Alter the ChangeLog format to make it Emacs-friendly.
	* Move assignment-compatibility testing into "image".
	* Some more 32-bit vs 64-bit fixes.

0.2.6 (27 November 2001)

	Runtime engine:

	* Internalcall methods for "System.Diagnostics".
	* Make asmfix a bit more tolerant of odd assemblers.
	* Enable the use of asmfix to generate an optimised version of
	  the CVM interpreter loop on x86 platforms.
	* Align "ILTypedRef" structures properly on 64-bit platforms.
	* Push "ffi_call" arguments onto a separate native argument stack
	  so that they can be handled faster and with the correct alignment.
	* Implement true PInvoke for calling external libraries.
	* Rewrite the path searching code for assemblies and external libraries.
	* Implement the "NativeTypeSizes" and "DllImportMap" attributes to
	  assist with the ugly business of PInvoke on non-Windows platforms.
	* Compile the host information from "configure" into "image/link.c"
	  so that it knows which external library to use when resolving uses
	  of the PInvoke mechanism.
	* Fixed a value type bug in "newobj".
	* Add user-specified search paths to the "ilrun" command-line.
	* Better support for UTC vs local time.
	* Exception handling in the verifier, CVM coder, and CVM interpreter.
	* Bug fixes to "GetTypeName" in "lib_type.c".
	* Print a message if "Main" throws an uncaught exception.
	* Internalcall methods needed to support "System.Text.StringBuilder".
	* Better detection for cygwin in "image/filemap.c".  Fix due to
	  Volker Hahn <Volker.Hahn@bytesteps.net>.
	* Inline common methods as CVM instructions.
	* Fixes to the verifier that were discovered during unit testing.

	C# Compiler:

	* Output a warning message when "-fsyntax-check" is used to remind
	  people that the compiler isn't finished.

	Assembler:

	* Enable short instruction squashing in the assembler.
	* Fix a bug that caused the assembler to use "ldarg" instead of
	  "ldloc" in some situations.

	Other:

	* Implement a large number (>3000) of unit tests for the verifier.
	* Begin implementing the "csdocvalil" program, to help validate
	  pnetlib against the ECMA's XML documentation for the C# library.
	* Update the FAQ.

0.2.4 (17 November 2001)

	Runtime engine:

	* Verifiable method pointers.
	* Add the Hans-Boehm garbage collector to the code, and link
	  it into the engine as the new object memory allocator.
	* Support for interface method layout and calling in the engine.
	* Alternative call API that passes arguments in structures rather
	  than in vararg parameters.
	* Internalcall methods for "System.Threading".
	* Fix branch and label code in the CVM coder.
	* Type lookup routines, to complement class and method lookups.
	* Pass command-line parameters down to the "Main" method.
	* Lay out static fields after the main class has been laid out,
	  to resolve layout circularity problems.
	* Internalcall methods for "System.CompilerServices".
	* Handle "this" parameters for value type methods properly.
	* Dump method entry and exit when CVM "dump mode" is enabled.
	* Dump the stack contents when CVM "dump mode" is enabled.
	* Minor fixes to "box", "switch", "dup", and "pop" instructions.
	* Move the engine string API's into "lib_string.c" so that they
	  can be implemented more efficiently.
	* Implement string intern'ing.
	* More internalcall methods for "System.String".
	* Experiment with increasing the speed of the engine by
	  post-processing gcc's output to optimise it better.

	C# Compiler:

	* Overflow testing for constant casts.
	* Load library images so that external definitions can be resolved.
	* Improve method overloading to handle multiple candidates better.
	* Make sure that the "System" namespace is always included by default.
	* Disable the builtin library if the external "mscorlib" was loaded.
	* Proper handling of "params" and non-"params" parameter expansion.
	* Modify method and type output code so that definitions are
	  properly qualified with their assembly.
	* Invoke the linker to link the final executable.

	Disassembler:

	* Dump a readable version of attribute values in the disassembler.
	* Dump the text version of the XML within security blobs.
	* Try to print the assembly name rather than the module name
	  when dumping class names, because the assembly name is a
	  truer representation of where the class came from.

	Other:

	* Clean up the code to remove all references to the obsolete
	  "ILValue" and "ILValueType" types.
	* Add some more functions to "support" to improve engine portability.
	* Better detection of the default alignment on the system.
	* Make "ILNativeInt" and "ILNativeUInt" the same size as native
	  pointers, to be consistent with ECMA requirements.
	* Implement the "csant" build utility program.
	* Fix the parsing and writing of array shapes in "image".
	* Don't report "runtime" methods as native in "ilnative", because
	  they are normally used for delegates which aren't strictly native
	  in the same sense as PInvoke and internalcall methods are.
	* Modify the Fibonacci example program so that it is compiled all
	  the way down to an executable with the C# compiler.
	* Fix the handling of "vararg" call site signatures.
	* Add "ILCmdLineExpand", which can expand references to response
	  files in the specified command-line.  This allows the compiler
	  tools to process very large command-lines.

0.2.2 (3 November 2001)

	* Synthetic class structures for array types.
	* Implement constructors for single-dimensional arrays.
	* Add a mini-disassembler for CVM, to assist with debugging.
	* Add "internalcall" methods for "System.Math", "System.Single",
	  "System.Double", "System.Type", "System.RuntimeType", "System.String,
	  "System.Threading.Monitor", and miscellaneous "Platform" classes.
	* Fixes to the assembler's lexer and member resolution code.
	* Handle "object" and "string" correctly in the assembler.
	* Numeric values for Unicode characters.
	* Improve the speed of "internalcall" method lookup.
	* Unicode-based lookup routines for classes.
	* Properly handle '<see langword="x">' in "csdoc".
	* Implement the CVM instructions related to objects, comparisons,
	  arrays, object construction, virtual methods,
	* Implement and document the linker.

0.2.0 (20 October 2001)

	* Better code generation for "return" statements.
	* Semantic analysis and code generation for "try", "lock", and
	  "throw" statements.
	* Code generation for "foreach" statements.
	* Continue the implementation of the bytecoder verifier.
	  Most instructions are handled now.
	* Fix the instruction format for the "unaligned" instruction.
	* Centralise the recognition and handling of value types within "image".
	* Improve system type resolution within "image".
	* Add two special images: system and synthetic, which are assigned
	  special roles within the runtime engine.
	* Implement the "Converted Virtual Machine", or CVM, whose bytecode is
	  more efficient to execute than raw IL.
	* Implement the CVM coder, which converts IL into CVM bytecode.
	* Remove "interpreter.c" which is now obsolete.
	* Java-style type and method lookup routines, which allow strings like
	  "(oSystem.String;i)V" to be used as signatures.
	* New format for call frames, method user data, and the thread state.
	* A helper library for hash tables, to support better code reuse.
	* Rewrite the class lookup routines to use the new-style hash tables.
	* System type lookup in the engine always uses the special "system"
	  image, to prevent applications redirecting the builtin types.
	* Simple object allocation.
	* Implement the "internalcall" methods for "Object", "String", "Array",
	  "Decimal", and "Stdio".
	* Hook "ilrun.c" through to the engine so that it is now possible
	  to run simple "Hello World" style examples.
	* Perform dynamic linking for member references.
	* Layout for static fields.

0.1.8 (04 October 2001)

	* Begin implementation of ildb, the IL debugger.  Not much working yet.
	* Begin implementation of the bytecode verifier for the engine.
	* Continue implementation of csdoc: mostly done now.
	* Implement a shell for converting the csdoc XML format into
	  a variety of other documentation formats.
	* Implement "csdoc2texi" and "csdoc2html" using the above shell.
	* New member lookup routines in the C# compiler that better
	  match the requirements of the C# specification.
	* Redesign the handling of namespaces in the C# compiler.
	* Semantic analysis for fields within objects that are not "this".
	* Static and instance properties.
	* New semantic kind called CS_SEMKIND_SVALUE (set value), for
      representing properties that only have a "set" method.
	* Update the documentation and man pages to describe "csdoc",
	  "csdoc2texi", "csdoc2html", and the XML documentation format.
	* Parse class constants as a special case of fields.
	* Dump the constant value of a field to the assembly stream.
	* Invocation support for static, instance, and virtual methods that
	  do not have overloaded variants.
	* Base class initializers.
	* Rearrange the code of "resgen" to make it easier to maintain.
	* Add .po support to "resgen".
	* Add "ildiff" to the tree.  Contributed by Gopal V <gopalv82@yahoo.com>.
	* Method overload resolution code.
	* Support for "ref", "out", and "params" arguments to methods.
	* Code generation for taking the address of an item (ILNode_GenRef).
	* Fix the importing of classes from the builtin system library.
	* Namespaces with names "X.Y.Z" are expanded properly in the parser.
	* Enumerated type declarations.

0.1.6 (11 September 2001)

	* Convert operator declarations into method nodes.
	* Convert indexer declarations into property nodes.
	* Convert constructors and destructors into method nodes.
	* Rearrange the C# grammar to allow better reuse of node types.
	* Semantic analysis for identifier nodes.
	* Add "System.TypedReference" to the set of builtin compiler types.
	* New scope item kinds for methods, fields, local variables, etc.
	* Handle primitive types in the C# grammar in a better way.
	* Semantic analysis for types, fields, methods, and properties.
	* Make sure that library types are properly imported in the code generator.
	* Move unsafe warnings and errors out of the grammar and into
	  semantic analysis.
	* Type gathering for fields, methods, and properties.
	* Code generation for fields, methods, and properties.
	* Never allow unsafe constructs when the output is JVM bytecode.
	* Convert "void" into a first-class type to simplify the grammar.
	  Places where "void" is disallowed is now caught in semantic analysis.
	* Unsafe statement blocks.
	* Semantic analysis and code generation for "ToBool", including
	  user-defined boolean conversions.
	* Add node information to all scope items to assist error reporting.
	* Keep track of the current class and method during semantic analysis.
	* Semantic analysis and code generation for local variables.
	* Wrap method bodies in a "NewScope" node to provide correct scoping.
	* Semantic analysis for return statements.
	* Semantic analysis and code generation fixes for C# operators.
	* Semantic analysis and code generation fixes for C# constants.
	* Semantic analysis and code generation for object/static field access.
	* Track source line numbers for the -g compiler option.
	* Better error reporting in the C# compiler.
	* Semantic analysis and code generation for "typeof" and "sizeof".
	* Improvements to the cast and coercion logic.
	* Reimplement the numeric promotion rules for the builtin binary and
	  unary operators.
	* Added "auto_gen.sh" to assist people who are building from CVS.
	* Bug fixes in "support/decimal.c".
	* Change the implementation of array types so that multi-dimensional
	  arrays are handled correctly.
	* Use the keyword ".library" in the assembler to refer to the C#
	  standard library assembly (usually "mscorlib").
	* Convert the JVM output routines in the compiler to output JL assembly
	  code instead of binary bytecode.
	* Modify the assembler to support the JL syntax.
	* Compilation of classes, fields, and methods to JL assembly code.
	* Modify the compiler's default overflow checking state to off.
	* More documentation of the assembler syntax.
	* Started implementation of "csdoc", which converts C# source code
	  into an XML document representing the program documentation.
	* Modifications to "resgen" to support the Beta2 binary resource
	  format, and the XML-based resource format.

0.1.4 (21 August 2001)

	* Converted ChangeLog into the GNU format and moved the previous
	  ChangeLog into NEWS.
	* Convert tool documentation into texinfo format: "pnettools.texi".
	* Fixed various manpage bugs, and moved some information to texinfo.
	* pnet.spec file contributed by "mdaniel".
	* Output basic module, assembly, and class information from the
	  C# compiler to the assembly code stream.
	* Remove some obsolete source and documentation files.
	* Applied a patch from Norman Stevens that adds most of the remaining
	  node creation functionality to the C# compiler.
	* Implement a Java .class and .jar file loader that converts Java
	  binaries into IL metadata on the fly.
	* Undo the hack that was added to "ilnative" in 0.1.0 because it is
	  no longer required.
	* Suppress the "class" prefix when dumping class names in catch clauses
	  within the disassembler.  Found by Gary L. Sun, <gsun@inetnow.net>.
	* Fix a bug in the disassembler that caused multiple "class" prefixes
	  to be added to nested class names.  Found by Gary L. Sun.
	* Remove the '[' form of floating point constants from the assembler,
	  because the ECMA-compliant '(' form will do the right thing now.
	  Requested by Gary L. Sun.
	* Avoid following cross-image links when dumping parent names in
	  the C# compiler.
	* Change all references to the obsolete ".io" file format to ".obj".
	* Implement and document new name mangling rules for C# -> JVM.
	* Remove all code pertaining to Beta 1 support because it is obsolete.
	* Implement class layout of fields and methods in the runtime engine.
	* Fix the "libffi" make so that it will always build the static library.

Versions 0.0.1 to 0.1.2 used a non-GNU ChangeLog format for reporting
changes.  The change information has been copied below.

0.1.2 (13 August 2001)

	* Began building the linker library, for use by "ilalink" and "cscc".
	* Fixed the handling of "MarshalledType" in the assembler so that
	  the correct parameter records are created.
	* Implement ".override" and ".param" in the assembler.
	* Updated attribute names in the assembler to ECMA compliance.
	* Added the "ILMethodGetCode", "ILMethodGetExceptions", and
	  "ILMethodFreeExceptions" functions to "il_program.h", to handle
	  pulling apart a method's code area.  Updated "ildasm" to use
	  these functions instead of its own.
	* Added support for integer label names in the assembler.
	* Exception blocks in the assembler.
	* Wrote the "debug.html" document, to describe a proposed mechanism
	  for representing debug information in IL image files.
	* Added debug section support to the "image" routines.
	* Events and properties in the assembler.
	* Rearrange the assembler grammar to centralise the handling
	  of method references, and to remove shift/reduce conflicts.
	* Dump the calling conventions of a property from its get or set
	  method, because property signatures do not include the conventions.
	* Fixed a nasty memory corruption bug in "image/create.c" due to
	  a reversed test.
	* Handle TypeDef parents that are later in the table than their children.
	* Implement call stack frame handling in the runtime engine.
	* Integrated some more C# compiler patches and Makefile.am modifications
	  from Norman Stevens <norman@arcady.u-net.com>.
	* Implement TypeRef and MemberRef compaction in "image/compact.c".
	* Add token fixup support to the assembler and image routines, to
	  fix up token references after compaction.
	* Fix the class scope handling.
	* Make the assembler less sensitive to changes in token codes that
	  result from sorting and compacting metadata tables.
	* Fix configure.in so that it looks in "$PREFIX/bin" for "treecc"
	  prior to searching the path.
	* Sort metadata tables that require it (constant, custom attr, etc).

0.1.1 (27 July 2001)

    * Create metadata structures within the assembler.
	* Get the assembler to the point of processing simple examples.
	* Minor changes to the metadata reading API and the disassembler
	  to address issues exposed by the assembler implementation.
	* Completed the first pass implementation of the image writing routines.
	* Added a 15 July 2001 snapshot of libffi to the tree.  The code was
	  obtained from the CVS server at "http://sources.redhat.com/libffi".
	* Wrote "doc/pinvoke.html" to describe possible PInvoke mechanisms
	  for Unix.  Working with the Mono group to create a common standard.
	* Implemented type and signature encoding.
	* Dynamic linking support in the "image/link.c" file.
	* Added an extra parameter to "ILImageLoad" to assist with dynamic linking.
	* Fixes for various Beta2-related bugs found in "ildasm" by Volker Hahn.
	* Output method code from the assembler to a final image file.
	* Recognize and dump the entry point method in the disassembler.
	* Dump token codes in "ildasm" for instructions that take a token.
	* Proper dumping of import scopes within "ildasm", including nesting.
	* Add all of the weird Microsoft-specific sections that make it
	  possible for valid IL binaries to run under Windows.
	* Change from /dev/random to /dev/urandom in the GUID generation code
	  because /dev/random can block while collecting entropy.  We apply
	  extra randomisation to the output of /dev/urandom to compensate.
	* Fix the code section determination logic in "_ILImageGetSection"
	  because Microsoft has re-ordered the IL sections in such a way
	  that it broke my previous code.
	* Map all PE/COFF sections into memory, even if they don't contain
	  IL-related information.  We need to do this because it is
	  indeterminate where Microsoft's compilers will put the IL code.
	* Add the "ILImageMapRVA" function to locate method code.
	* Fix the dumping of CMOD_OPT and CMOD_REQD types in "dump_type.c".
	  The wrong union field was being used to dump the modified type.
	* Added support to the C# pre-processor, scanner, and grammer to
	  parse doc comments in the input.
	* Continuation of the metadata API documentation in "pnetimg.texi".
	* Changed "pinvokeimpl(?)" to "pinvokeimpl()" in the disassembler
	  as there are some cases where PInvoke can be specified without
	  explicit linkage information.
	* Integrated some C# compiler patches from Norman Stevens
	  <norman@arcady.u-net.com> related to constant declarations.

0.1.0 (16 July 2001)

    * Improved the metadata API routines in "image" considerably.
    * Types such as ILModule/ILModuleRef, ILAssembly/ILAssemblyRef, etc
      have been collapsed into common types that work for both local and
      referenced tokens.
    * Moved most of the memory management for an image from ILContext
      to ILImage so that all token structures can be discarded when
      an image is unloaded from the system.
    * Support for the ECMA/Beta2 metadata formats.
    * Changed constant names in "il_meta.h" to match the ECMA specs.
    * New flags in the assembler to match ECMA metadata additions.
    * Changes to the opcode list to match the ECMA specification.
    * Cleaned out some old documentation and README material that
      was no longer relevant.
    * Metadata index writing support in "image".
    * Implemented the "ilrun" program, to act as the core of the
      future runtime engine.
    * "ilnative" now recognises methods with no IL code as "internalcall"
      even if that flag has not been specified.  This is a temporary work
      around for a weird compile issue in "pnetlib" when Microsoft's "csc"
      is used to compile "internalcall" methods.  Will fix later.
    * Implemented parse code for the remaining metadata token types in "image".
    * Completed the implementation of "ildasm".
    * Modified "ilasm_grammar.y" and "cs_grammar.y" for byacc-compatibility.
    * Implemented synthetic classes in "image".  These are classes that
      correspond to types such as "array of X", "pointer to X", etc.

0.0.6 (11 July 2001)

    * Scope handling in the C# compiler.
    * Patched "include/il_values.h" to eliminate an annoying warning
      on Mac OS X related to the "long double" type, which PPC doesn't
      really have.  Thanks to Jason Titus <jazzmantitus@yahoo.com>
      for finding this.
    * Improved type gathering in the C# compiler.
    * Metadata writing support in "image/*".
    * Did some work on making the code compile under Visual Studio 6.0.
      This is still a work in progress.
    * Implemented the "ilfind" utility.
    * Move file mapping functions from "image/pecoff_loader.c" to
      "support/filemap.c".
    * Use Windows-specific API's to perform file mapping under Windows,
      because they work better than Cygwin's mmap implementation.
    * Changed the representation of the "decimal" type to more closely
      match that used by the "System.Decimal" class in the C# library.
    * Created an "ILSpawnProcess" function in "support/spawn.c" to
      isolate the code for spawning child processes from the compiler.
    * Fixed the values of some of the IL_META_VARIANTTYPE_* constants.
    * Re-write of "codegen" and "cscc" to use the "treecc" utility
      for the compiler core.
    * Added Java bytecode generation routines to the compiler, so that
      C# code can eventually be compiled to run on the JVM.

0.0.5 (9 April 2001)

    * Build the metadata structures within the assembler.
    * Implement some Unicode support routines in "support".
    * Move the C# library into a separate "pnetlib" tree.
    * Implement the "resgen" resource generation utility.
    * Convert the command-line parser in the various programs
      into a common library in "support".
    * Fixed many bugs in the C# compiler to turn it into
      a pretty good C# syntax checker.
    * Changed the way semantic analysis is carried out in
      the compiler.
    * Implemented a new plugin mechanism for "cscc" which works
      better for languages like C# which need to compile many
      source files at once to get all of the program definitions.
    * Expanded the man page for cscc(1).

0.0.4 (26 March 2001)

    * The "doc/metadata.html" file has been fleshed out with lots of
      information that has been discovered about the metadata section.
    * Implemented memory pool and memory stack allocators to improve the
      performance of code that allocate lots of small structures, such
      as the compiler and the program loader.
    * Define and implement the core types in "image" that represent
      classes, methods, fields, etc.
    * Metadata index parsing.
    * Write the "ilnative" utility which dumps the native methods
      that are used in an IL binary.
    * The disassembler now basically works, with only a few gaps to fill.

0.0.3   Limited release (12 March 2001)
        First freshmeat.net release (14 March 2001)

    * Build the parse tree for C# programs.
    * Build a table of builtin types and operators in the C# compiler.
    * Write man pages for ilasm, ildasm, and cscc.
    * The disassembler can dump the contents of methods, but because
      we still don't know the format of metadata, we can't yet display
      which methods correspond to which contents.
    * PE/COFF writing code in "image/writer.c".
    * GUID generation code in "support/guid.c".
    * Implemented the "ilsize" utility.
    * Some code generation logic in "ilasm".
    * Converted "doc/metadata.txt" into "doc/metadata.html".
    * Added some scripts to the "tools" directory to make releases smoother.

0.0.2   Limited release (4 March 2001)

    * Massive overhaul of the weak typing system based around "ILValue".
      Operations on "ILValue" have been centralised into "support" so
      that both the runtime and compiler can use the same value system.
    * Implementation of support routines for the "decimal" type.
    * Implemented a handful of "System" classes.
    * Compiler front-end, lexical analyser, and syntactic analysis.
    * Support for compiler plug-ins for other languages.
    * Make the lexical analyser Unicode and UTF-8 aware.

0.0.1   Limited release (21 February 2001)

    * Disassembler can dump IL binaries in hex.
    * Assembler can understand the syntax, but cannot convert into code yet.
    * IL binary loading working, except for metadata-related parts.
    * Fragments of runtime, compiler, and other tools.
