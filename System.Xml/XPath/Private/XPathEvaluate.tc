/*
 * XPathEvaluate.tc - Evaluation operations for XPath 
 *
 * Copyright (C) 2004  Southern Storm Software, Pty Ltd.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

%operation %virtual object EvaluateInternal(Expression node, XPathNodeIterator iterator) = {null}

EvaluateInternal(Expression)
{
	throw new Exception(node.GetType() + " doesn't have an EvaluateInternal");
}

EvaluateInternal(RootPathExpression)
{
	XPathNavigator nav = iterator.Current.Clone();
	nav.MoveToRoot();
	return new XPathSelfIterator(nav, null);
}

EvaluateInternal(NodeTest)
{
	// TODO handle various axes
	XPathSimpleIterator axis = null;
	
	switch(node.axis)
	{
		case XPathAxis.Self:
		{
			axis = new XPathSelfIterator(
									(XPathBaseIterator)iterator);
		}
		break;
		
		case XPathAxis.Child:
		{
			axis = new XPathChildIterator(
									(XPathBaseIterator)iterator);
		}
		break;
		
		case XPathAxis.Parent:
		{
			axis = new XPathParentIterator(
									(XPathBaseIterator)iterator);
		}
		break;

		case XPathAxis.Attribute:
		{
			axis = new XPathAttributeIterator(
									(XPathBaseIterator)iterator);
		}
		break;

		case XPathAxis.Ancestor:
		{
			axis = new XPathAncestorIterator(
									(XPathBaseIterator)iterator);
		}
		break;
		
		case XPathAxis.AncestorOrSelf:
		{
			axis = new XPathAncestorOrSelfIterator(
									(XPathBaseIterator)iterator);
		}
		break;
		
		case XPathAxis.Descendant:
		{
			axis = new XPathDescendantIterator(
									(XPathBaseIterator)iterator);
		}
		break;
		
		case XPathAxis.DescendantOrSelf:
		{
			axis = new XPathDescendantOrSelfIterator(
									(XPathBaseIterator)iterator);
		}
		break;
		
		default:
		{
			throw new NotImplementedException(node.axis + " is not implemented");
		}
		break;
	}
	
	return new XPathAxisIterator(axis, this);
}

EvaluateInternal(SlashExpression)
{
	XPathBaseIterator lhs = (XPathBaseIterator)node.left.Evaluate(iterator);
	return new XPathSlashIterator(lhs, node.right);
}

EvaluateInternal(RecursiveDescentPathExpression)
{
	XPathBaseIterator lhs = (XPathBaseIterator)node.left.Evaluate(iterator);
	NodeTest test = new NodeTest(XPathAxis.DescendantOrSelf, 
								 XPathNodeType.All, null);
	return new XPathSlashIterator(
					new XPathSlashIterator(lhs, test ),
					node.right);
}

EvaluateInternal(FilterExpression)
{
	XPathBaseIterator left = (XPathBaseIterator)node.expr.Evaluate(iterator);
	return new XPathPredicateIterator(left, node.predicate);
}

EvaluateInternal(LiteralExpression)
{
	return node.value; 
}

EvaluateInternal(NumberExpression)
{
	return node.number; 
}

EvaluateInternal(EqualityExpression)
{
	Object lhs = node.left.Evaluate(iterator);
	Object rhs = node.right.Evaluate(iterator);
	
	XPathResultType ltype = node.left.ReturnType;
	XPathResultType rtype = node.right.ReturnType;
	
	// TODO: remove double evaluation of iterators 
	//       implement proper coercion methods or at least some memoization

	if(ltype == XPathResultType.NodeSet || rtype == XPathResultType.NodeSet)
	{
		Expression left = node.left;
		Expression right = node.right;
		
		// Flip the order as a == b is the same as b == a
		// TODO: do this while compiling itself , if possible
		if(ltype != XPathResultType.NodeSet)
		{
			left = node.right;
			right = node.left;
			XPathResultType tmp = ltype;
			ltype = rtype;
			rtype = tmp;
		}
		switch(rtype)
		{
			case XPathResultType.Boolean:
			{
				return (node.invert != 
							(left.EvaluateAs(iterator, rtype) == 
								left.EvaluateAs(iterator, rtype)));
			}
			break;
			case XPathResultType.Number:
			{
				XPathNodeIterator iterleft = (XPathNodeIterator)left.Evaluate(iterator);
				double d = (double) right.EvaluateAs(iterator, XPathResultType.Number);
				while(iterleft.MoveNext())
				{
					return node.invert != 
						((Convert.ToDouble(iterleft.Current.Value) == d));
				}
			}
			break;
			case XPathResultType.String:
			{
				XPathNodeIterator iterleft = (XPathNodeIterator)left.Evaluate(iterator);
				String  s = (String)right.EvaluateAs(iterator, XPathResultType.String);
				while(iterleft.MoveNext())
				{
					return(invert != (iterleft.Current.Value == s));
				}
			}
			break;
			case XPathResultType.NodeSet:
			{
			}
			break;
			
		}
	}
	else if( ltype == XPathResultType.Boolean || 
	         rtype == XPathResultType.Boolean)
	{
		return (node.invert != 
				((node.left.EvaluateAs(iterator, XPathResultType.Boolean) == 
					node.right.EvaluateAs(iterator, XPathResultType.Boolean))));
	}
	else if( ltype == XPathResultType.Number || 
	         rtype == XPathResultType.Number)
	{
		return (node.invert !=
				((node.left.EvaluateAs(iterator, XPathResultType.Number) == 
					node.right.EvaluateAs(iterator, XPathResultType.Number))));
	}
	else if( ltype == XPathResultType.String || 
	         rtype == XPathResultType.String)
	{
		return (node.invert != 
				((node.left.EvaluateAs(iterator, XPathResultType.String) == 
					node.right.EvaluateAs(iterator, XPathResultType.String))));
	}
	return false;
}

EvaluateInternal(AndExpression)
{
	return	
	(((bool)node.left.EvaluateAs(iterator, XPathResultType.Boolean) == true) && 
	((bool)node.right.EvaluateAs(iterator, XPathResultType.Boolean) == true));
}

EvaluateInternal(OrExpression)
{
	return	
	(((bool)node.left.EvaluateAs(iterator, XPathResultType.Boolean) == true) ||
	((bool)node.right.EvaluateAs(iterator, XPathResultType.Boolean) == true));
}
