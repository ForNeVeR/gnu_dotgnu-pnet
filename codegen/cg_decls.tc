%output "cg_decls.c"

%{
/*
 * cg_decls.tc - Declaration nodes.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "cg_nodes.h"
#include "il_dumpasm.h"

%}

/*
 * Generate discard code for a class definition.
 */
ILNode_GenDiscard(ILNode_ClassDefn)
{
	ILClass *classInfo;
	ILImplements *impl;
	ILClass *interface;
	int first;

	/* Get the class information structure */
	classInfo = node->classInfo;
	if(!classInfo || classInfo == ((ILClass *)1))
	{
		return;
	}

	/* Output the class heading */
	if(info->asmOutput)
	{
		/* Output the namespace information */
		if(ILClass_Namespace(classInfo) && ILClass_NestedParent(classInfo) == 0)
		{
			fputs(".namespace ", info->asmOutput);
			ILDumpIdentifier(info->asmOutput, ILClass_Namespace(classInfo), 0,
							 IL_DUMP_QUOTE_NAMES);
			fputs("\n{\n", info->asmOutput);
		}

		/* Output the class flags and name */
		fputs(".class ", info->asmOutput);
		ILDumpFlags(info->asmOutput, (unsigned long)(node->modifiers),
					ILTypeDefinitionFlags, 0);
		ILDumpIdentifier(info->asmOutput, ILClass_Name(classInfo), 0,
						 IL_DUMP_QUOTE_NAMES);

		/* Output the name of the parent class */
		if(ILClass_ParentRef(classInfo) != 0)
		{
			fputs(" extends ", info->asmOutput);
			ILDumpClassName(info->asmOutput, info->image,
							ILClass_ParentRef(classInfo),
							IL_DUMP_QUOTE_NAMES);
		}

		/* Output the names of the implemented interfaces */
		impl = 0;
		first = 1;
		while((impl = ILClassNextImplements(classInfo, impl)) != 0)
		{
			interface = ILImplementsGetInterface(impl);
			if(first)
			{
				fputs(" implements ", info->asmOutput);
				first = 0;
			}
			else
			{
				fputs(", ", info->asmOutput);
			}
			ILDumpClassName(info->asmOutput, info->image, interface,
							IL_DUMP_QUOTE_NAMES);
		}

		/* Done with the header */
		fputs("\n{\n", info->asmOutput);
	}

	/* Output the class members */
	ILNode_GenDiscard(node->body, info);

	/* Output the class footer */
	if(info->asmOutput)
	{
		fprintf(info->asmOutput, "} // class %s\n", ILClass_Name(classInfo));
		if(ILClass_Namespace(classInfo) && ILClass_NestedParent(classInfo) == 0)
		{
			fprintf(info->asmOutput, "} // namespace %s\n",
					ILClass_Namespace(classInfo));
		}
	}
}

/*
 * Generate discard code for a scope change.
 */
ILNode_GenDiscard(ILNode_ScopeChange)
{
	if(node->body)
	{
		ILScope *oldScope = info->currentScope;
		info->currentScope = node->scope;
		ILNode_GenDiscard(node->body, info);
		info->currentScope = oldScope;
	}
}

/*
 * Generate discard code for a constant declaration.
 */
ILNode_GenDiscard(ILNode_ConstDeclaration)
{
	/* FIXME: just pass it down? */
	if (node->attributes != NULL)
	{
		ILNode_GenDiscard(node->attributes, info);
	}
	ILNode_GenDiscard(node->type, info);
	ILNode_GenDiscard(node->constDeclarators, info);
}

/*
 * Generate discard code for a constant declarator.
 */
ILNode_GenDiscard(ILNode_ConstDeclarator)
{
	/* TODO */
}

/*
 * Generate discard code for local variable declaration 
 */
ILNode_GenDiscard(ILNode_VarDeclaration)
{
	/* TODO */
}

/*
 * Generate discard code for a field declaration .
 */
ILNode_GenDiscard(ILNode_FieldDeclaration)
{
	ILNode_ListIter	iter;
	ILNode_VarDeclarator *decl;
	ILField *field;

	if(node->fieldDeclarators && info->asmOutput)
	{
		ILNode_ListIter_Init(&iter, node->fieldDeclarators);
		while((decl = (ILNode_VarDeclarator *)ILNode_ListIter_Next(&iter)) != 0)
		{
			field = decl->fieldInfo;
			if(field)
			{
				/* Dump the field signature and name */
				fputs(".field ", info->asmOutput);
				ILDumpFlags(info->asmOutput, ILField_Attrs(field),
						    ILFieldDefinitionFlags, 0);
				ILDumpType(info->asmOutput, info->image, ILField_Type(field),
						   IL_DUMP_QUOTE_NAMES);
				fputc(' ', info->asmOutput);
				ILDumpIdentifier(info->asmOutput, ILField_Name(field), 0,
								 IL_DUMP_QUOTE_NAMES);

				/* Dump the field initializer */

				/* Terminate the field definition */
				putc('\n', info->asmOutput);
			}
		}
	}
}

/*
 * Generate discard code for a variable declarator.
 */
ILNode_GenDiscard(ILNode_VarDeclarator)
{
#if 0
	if (info->asmOutput)
	{
		fputs (ILQualIdentName (node->name, 1), info->asmOutput);
		if (node->initializer)
		{
			ILEvalValue evalue;
			fputs (" = ", info->asmOutput);
			if (ILNode_EvalConst(node->initializer, info, &evalue))
			{
				switch (evalue.valueType)
				{
				case ILMachineType_Float64:
					fprintf (info->asmOutput, "float64 (%f)", 
							 evalue.un.r8Value);
					break;
				case ILMachineType_Float32:
					fprintf (info->asmOutput, "float64 (%f)", 
						   (double)evalue.un.r4Value);
					break;
				case ILMachineType_Int64:
					fprintf (info->asmOutput, "int64 (%lld)",
							 evalue.un.i8Value);
					break;
				case ILMachineType_UInt64:
					fprintf (info->asmOutput, "uint64 (%llu)",
							 (ILUInt64) evalue.un.i8Value);
					break;
				case ILMachineType_Int32:
					fprintf (info->asmOutput, "int32 (%d)",
							 evalue.un.i4Value);
					break;
				case ILMachineType_UInt32:
					fprintf (info->asmOutput, "uint32 (%u)",
							 (ILUInt32)evalue.un.i4Value);
					break;
					/* TODO, unfinished */
				default:
					break;
				}
			}
		}
	}
#endif
}

/*
 * Generate discard code for event field declaration
 */
ILNode_GenDiscard(ILNode_EventFieldDeclaration)
{
#if 0
	/* FIXME: just pass it down? */
	if (node->attributes)
	{
		ILNode_GenDiscard(node->attributes, info);
	}
	DumpTypeName(info->asmOutput, node->type);
	ILNode_GenDiscard(node->varDeclarators, info);
#endif
}

/*
 * Generate discard code for event property declaration
 */
ILNode_GenDiscard(ILNode_EventPropertyDeclaration)
{
#if 0
	/* FIXME: just pass it down? */
	if (node->attributes)
	{
		ILNode_GenDiscard(node->attributes, info);
	}
	DumpTypeName(info->asmOutput, node->type);
	ILNode_GenDiscard(node->name, info);
	ILNode_GenDiscard(node->addAccessor, info);
	ILNode_GenDiscard(node->removeAccessor, info);
#endif
}

%{

/*
 * Generate discard code for the body of a method.
 */
static void MethodGenDiscard(ILGenInfo *info, ILMethod *method,
							 ILNode *initCode, ILNode *body)
{
	ILGotoEntry *gotoEntry, *nextGoto;

	/* Set up the return type so that "return" statements
	   know what to cast the return value to upon exit */
	info->returnType =
		ILTypeToMachineType(ILMethod_Signature(method)->un.method.retType);

	/* Dump the code within the body of the method */
	if(initCode)
	{
		ILNode_GenDiscard(initCode, info);
	}
	if(body)
	{
		ILNode_GenDiscard(body, info);
	}

	/* Add an explicit return instruction if the body didn't */
	if(!body || !ILNodeEndsInReturn(body))
	{
		ILGenCast(info, ILMachineType_Void, info->returnType);
		ILGenSimple(info, IL_OP_RET);
		if(info->returnType != ILMachineType_Void)
		{
			ILGenAdjust(info, -1);
		}
	}

	/* Output the maximum stack height to the method */
	if(info->asmOutput)
	{
		fprintf(info->asmOutput, "\t.maxstack %ld\n", info->maxStackHeight);
	}

	/* Clear the stack heights */
	info->stackHeight = 0;
	info->maxStackHeight = 0;

	/* Clear the return type information */
	info->returnType = ILMachineType_Void;
	info->returnVar = -1;
	info->returnLabel = ILLabel_Undefined;

	/* Clear the temporary throw variable */
	info->throwVariable = -1;

	/* Clear the "goto" list */
	gotoEntry = info->gotoList;
	while(gotoEntry != 0)
	{
		nextGoto = gotoEntry->next;
		ILFree(gotoEntry);
		gotoEntry = nextGoto;
	}
	info->gotoList = 0;

	/* Clear the list of local variables */
	info->numLocalVars = 0;
}

%}

/* 
 * Generate discard code for method declarations.
 */
ILNode_GenDiscard(ILNode_MethodDeclaration)
{
	if(info->asmOutput && node->methodInfo)
	{
		FILE *outstream = info->asmOutput;
		ILMethod *method;
		ILPInvoke *pinvoke;

		/* Get the method information block to be dumped */
		method = node->methodInfo;

		/* Does the method have PInvoke information associated with it? */
		if(ILMethod_HasPInvokeImpl(method))
		{
			pinvoke = ILPInvokeFind(method);
			if(pinvoke)
			{
				/* Declare the external module containing the function */
				fputs(".module extern ", outstream);
				ILDumpIdentifier(outstream,
						ILModule_Name(ILPInvoke_Module(pinvoke)), 0,
						IL_DUMP_QUOTE_NAMES);
			}
		}
		else
		{
			pinvoke = 0;
		}

		/* Dump the method heading */
		fputs(".method ", outstream);
		ILDumpFlags(outstream, ILMethod_Attrs(method),
					ILMethodDefinitionFlags, 0);
		if(pinvoke)
		{
			/* Dump PInvoke information for the method */
			fputs("pinvokeimpl(", info->asmOutput);
			ILDumpString(outstream,
						 ILModule_Name(ILPInvoke_Module(pinvoke)));
			putc(' ', outstream);
			if(strcmp(ILPInvoke_Alias(pinvoke), ILMethod_Name(method)) != 0)
			{
				fputs("as ", outstream);
				ILDumpString(outstream, ILPInvoke_Alias(pinvoke));
				putc(' ', outstream);
			}
			ILDumpFlags(outstream, ILPInvoke_Attrs(pinvoke),
						ILPInvokeImplementationFlags, 0);
			fputs(") ", outstream);
		}
		ILDumpMethodType(outstream, info->image,
						 ILMethod_Signature(method),
						 IL_DUMP_QUOTE_NAMES, 0,
						 ILMethod_Name(method), method);
		putc(' ', outstream);
		ILDumpFlags(outstream, ILMethod_ImplAttrs(method),
					ILMethodImplementationFlags, 0);
		fputs("\n{\n", outstream);

		/* Dump the code within the body of the method */
		MethodGenDiscard(info, method, node->initCode, node->body);

		/* Dump the method terminator */
		fputs ("} // method ", outstream);
		ILDumpIdentifier(outstream, ILMethod_Name(method), 0, 0);
		putc('\n', outstream);
	}
}

/*
 * Generate discard for property declaration
 */
ILNode_GenDiscard(ILNode_PropertyDeclaration)
{
#if 0
	/* FIXME: just pass it down? */
	if (node->attributes)
	{
		ILNode_GenDiscard(node->attributes, info);
	}
	DumpTypeName(info->asmOutput, node->type);
	ILNode_GenDiscard(node->name, info);
	ILNode_GenDiscard(node->getAccessor, info);
	ILNode_GenDiscard(node->setAccessor, info);
#endif
}

ILNode_GenDiscard(ILNode_AccessorDeclaration)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_EnumDeclaration)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_EnumMemberDeclaration)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_DelegateDeclaration)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_FormalParameter)
{
#if 0
	if (info->asmOutput)
	{
		/*FIXME attributes, parameter modifier */
		DumpTypeName(info->asmOutput, node->type);
		ILNode_GenDiscard(node->type, info);
		fputc(' ', info->asmOutput);
		fputs (ILQualIdentName (node->name, 1), info->asmOutput);
	}
#endif
}

ILNode_GenDiscard(ILNode_Attribute)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_AttrArgs)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_NamedArg)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_Argument)
{
	/* TODO */
}
