%output "cg_decls.c"

%{
/*
 * cg_decls.tc - Declaration nodes.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "cg_nodes.h"
#include "il_dumpasm.h"

%}

/*
 * Generate discard code for a class definition.
 */
ILNode_GenDiscard(ILNode_ClassDefn)
{
	ILClass *classInfo;
	ILImplements *impl;
	ILClass *interface;
	int first;

	/* Get the class information structure */
	classInfo = node->classInfo;
	if(!classInfo || classInfo == ((ILClass *)1))
	{
		return;
	}

	/* Output the class heading */
	if(info->asmOutput)
	{
		/* Output the namespace information */
		if(ILClass_Namespace(classInfo) && ILClass_NestedParent(classInfo) == 0)
		{
			fputs(".namespace ", info->asmOutput);
			ILDumpIdentifier(info->asmOutput, ILClass_Namespace(classInfo), 0,
							 IL_DUMP_QUOTE_NAMES);
			fputs("\n{\n", info->asmOutput);
		}

		/* Output the class flags and name */
		fputs(".class ", info->asmOutput);
		ILDumpFlags(info->asmOutput, (unsigned long)(node->modifiers),
					ILTypeDefinitionFlags, 0);
		ILDumpIdentifier(info->asmOutput, ILClass_Name(classInfo), 0,
						 IL_DUMP_QUOTE_NAMES);

		/* Output the name of the parent class */
		if(ILClass_ParentRef(classInfo) != 0)
		{
			fputs(" extends ", info->asmOutput);
			ILDumpClassName(info->asmOutput, info->image,
							ILClass_ParentRef(classInfo),
							IL_DUMP_QUOTE_NAMES);
		}

		/* Output the names of the implemented interfaces */
		impl = 0;
		first = 1;
		while((impl = ILClassNextImplements(classInfo, impl)) != 0)
		{
			interface = ILImplementsGetInterface(impl);
			if(first)
			{
				fputs(" implements ", info->asmOutput);
				first = 0;
			}
			else
			{
				fputs(", ", info->asmOutput);
			}
			ILDumpClassName(info->asmOutput, info->image, interface,
							IL_DUMP_QUOTE_NAMES);
		}

		/* Done with the header */
		fputs("\n{\n", info->asmOutput);
	}

	/* Output the class members */
	if(info->outputIsJava)
	{
		JavaGenDiscard(node->body, info);
	}
	else
	{
		ILNode_GenDiscard(node->body, info);
	}

	/* Output the class footer */
	if(info->asmOutput)
	{
		fprintf(info->asmOutput, "} // class %s\n", ILClass_Name(classInfo));
		if(ILClass_Namespace(classInfo) && ILClass_NestedParent(classInfo) == 0)
		{
			fprintf(info->asmOutput, "} // namespace %s\n",
					ILClass_Namespace(classInfo));
		}
	}
}

/*
 * Generate discard code for a scope change.
 */
ILNode_GenDiscard(ILNode_ScopeChange)
{
	if(node->body)
	{
		ILScope *oldScope = info->currentScope;
		info->currentScope = node->scope;
		ILNode_GenDiscard(node->body, info);
		info->currentScope = oldScope;
	}
}

/*
 * Generate discard code for a field declaration .
 */
ILNode_GenDiscard(ILNode_FieldDeclaration)
{
	ILNode_ListIter	iter;
	ILNode_FieldDeclarator *decl;
	ILField *field;

	if(node->fieldDeclarators && info->asmOutput)
	{
		ILNode_ListIter_Init(&iter, node->fieldDeclarators);
		while((decl = (ILNode_FieldDeclarator *)
							ILNode_ListIter_Next(&iter)) != 0)
		{
			field = decl->fieldInfo;
			if(field)
			{
				/* Dump the field signature and name */
				fputs(".field ", info->asmOutput);
				ILDumpFlags(info->asmOutput, ILField_Attrs(field),
						    ILFieldDefinitionFlags, 0);
				ILDumpType(info->asmOutput, info->image, ILField_Type(field),
						   IL_DUMP_QUOTE_NAMES);
				fputc(' ', info->asmOutput);
				ILDumpIdentifier(info->asmOutput, ILField_Name(field), 0,
								 IL_DUMP_QUOTE_NAMES);

				/* Dump the field initializer */
				ILDumpConstant(info->asmOutput, (ILProgramItem *)field);

				/* Terminate the field definition */
				putc('\n', info->asmOutput);
			}
		}
	}
}

/*
 * Generate discard code for a field declarator.
 */
ILNode_GenDiscard(ILNode_FieldDeclarator)
{
	/* Nothing to do here: handled by ILNode_FieldDeclaration */
}

/*
 * Generate discard code for event field declaration
 */
ILNode_GenDiscard(ILNode_EventFieldDeclaration)
{
#if 0
	/* FIXME: just pass it down? */
	if (node->attributes)
	{
		ILNode_GenDiscard(node->attributes, info);
	}
	DumpTypeName(info->asmOutput, node->type);
	ILNode_GenDiscard(node->varDeclarators, info);
#endif
}

/*
 * Generate discard code for event property declaration
 */
ILNode_GenDiscard(ILNode_EventPropertyDeclaration)
{
#if 0
	/* FIXME: just pass it down? */
	if (node->attributes)
	{
		ILNode_GenDiscard(node->attributes, info);
	}
	DumpTypeName(info->asmOutput, node->type);
	ILNode_GenDiscard(node->name, info);
	ILNode_GenDiscard(node->addAccessor, info);
	ILNode_GenDiscard(node->removeAccessor, info);
#endif
}

%{

/*
 * Dump the local variable block for an IL method.
 */
static void DumpILLocals(ILGenInfo *info, FILE *outstream, ILType *localVarSig)
{
	/* Dump the local variable signature, and set the
	   base for temporary local variable allocation */
	if(localVarSig)
	{
		unsigned long num = ILTypeNumLocals(localVarSig);
		unsigned long index;
		fputs("\t.locals\t(", outstream);
		for(index = 0; index < num; ++index)
		{
			if(index != 0)
			{
				fputs(", ", outstream);
			}
			ILDumpType(outstream, info->image,
					   ILTypeGetLocal(localVarSig, index),
					   IL_DUMP_QUOTE_NAMES);
		}
		fputs(")\n", outstream);
		info->tempLocalBase = num;
	}
	else
	{
		info->tempLocalBase = 0;
	}
}

/*
 * Allocate the arguments and locals for a JL method.
 */
static void AllocJLVars(ILGenInfo *info, ILType *signature,
						ILType *localVarSig)
{
	ILType *vars;
	ILType *type;
	unsigned long num;
	unsigned long index;
	ILMachineType machineType;
	char *name;

	/* Allocate frame positions to the method arguments */
	JavaGenStartFrame(info);
	vars = signature;
	if((vars->kind & (IL_META_CALLCONV_HASTHIS << 8)) != 0 &&
	   (vars->kind & (IL_META_CALLCONV_EXPLICITTHIS << 8)) == 0)
	{
		/* Allocate a slot for the "this" argument */
		JavaGenAddFrameSlot(info, ILMachineType_ObjectRef);
	}
	num = vars->num;
	for(index = 1; index <= num; ++index)
	{
		JavaGenAddFrameSlot
			(info, ILTypeToMachineType(ILTypeGetParam(vars, index)));
	}

	/* Allocate frame positions to the locals, and initialize them */
	JavaGenStartLocals(info);
	vars = localVarSig;
	if(vars)
	{
		num = ILTypeNumLocals(vars);
		for(index = 0; index < num; ++index)
		{
			type = ILTypeGetLocal(vars, index);
			machineType = ILTypeToMachineType(type);
			JavaGenAddFrameSlot(info, machineType);
			if(machineType == ILMachineType_Decimal && info->useJavaLib)
			{
				/* Initialize "decimal" objects using "BigDecimal" */
				JavaGenSimple(info, JAVA_OP_LCONST_0);
				JavaGenAdjust(info, 2);
				JavaGenCallByName(info, "java/math/BigDecimal",
						  "valueOf", "(J)Ljava/math/BigDecimal;");
				JavaGenStoreLocal(info, index, ILMachineType_ManagedValue);
				JavaGenAdjust(info, -2);
			}
			else if(machineType == ILMachineType_ManagedValue ||
					machineType == ILMachineType_Decimal)
			{
				/* Regular value type, which we assume has a
				   zero-argument constructor per the C# rules */
				name = JavaGetClassName(info, ILType_ToValueType(type));
				JavaGenNewObj(info, name);
				JavaGenSimple(info, JAVA_OP_DUP);
				JavaGenAdjust(info, 2);
				JavaGenCallCtor(info, name, "<init>", "()V");
				JavaGenStoreLocal(info, index, ILMachineType_ManagedValue);
				JavaGenAdjust(info, -2);
				ILFree(name);
			}
		}
		info->tempLocalBase = num;
	}
	else
	{
		info->tempLocalBase = 0;
	}
}

/*
 * Generate discard code for a method.
 */
static void MethodGenDiscard(ILGenInfo *info, FILE *outstream,
							 ILNode_MethodDeclaration *node,
							 ILMethod *method)
{
	ILPInvoke *pinvoke;
	ILGotoEntry *gotoEntry, *nextGoto;
	int outputLabel;

	/* Does the method have PInvoke information associated with it? */
	if(ILMethod_HasPInvokeImpl(method))
	{
		pinvoke = ILPInvokeFind(method);
		if(pinvoke)
		{
			/* Declare the external module containing the function */
			fputs(".module extern ", outstream);
			ILDumpIdentifier(outstream,
					ILModule_Name(ILPInvoke_Module(pinvoke)), 0,
					IL_DUMP_QUOTE_NAMES);
		}
	}
	else
	{
		pinvoke = 0;
	}

	/* Dump the method heading */
	fputs(".method ", outstream);
	ILDumpFlags(outstream, ILMethod_Attrs(method),
				ILMethodDefinitionFlags, 0);
	if(pinvoke)
	{
		/* Dump PInvoke information for the method */
		fputs("pinvokeimpl(", info->asmOutput);
		ILDumpString(outstream,
					 ILModule_Name(ILPInvoke_Module(pinvoke)));
		putc(' ', outstream);
		if(strcmp(ILPInvoke_Alias(pinvoke), ILMethod_Name(method)) != 0)
		{
			fputs("as ", outstream);
			ILDumpString(outstream, ILPInvoke_Alias(pinvoke));
			putc(' ', outstream);
		}
		ILDumpFlags(outstream, ILPInvoke_Attrs(pinvoke),
					ILPInvokeImplementationFlags, 0);
		fputs(") ", outstream);
	}
	ILDumpMethodType(outstream, info->image,
					 ILMethod_Signature(method),
					 IL_DUMP_QUOTE_NAMES, 0,
					 ILMethod_Name(method), method);
	putc(' ', outstream);
	ILDumpFlags(outstream, ILMethod_ImplAttrs(method),
				ILMethodImplementationFlags, 0);
	if(info->outputIsJava && !ILMethod_IsJava(method))
	{
		/* Make sure that the assembler is informed
		   that this is a Java method */
		fputs("java ", outstream);
	}
	fputs("\n{\n", outstream);

	/* Set up the return type so that "return" statements
	   know what to cast the return value to upon exit */
	info->returnType =
		ILTypeToMachineType(ILMethod_Signature(method)->un.method.retType);

	/* The local variable frame is created differently in IL and JL */
	if(info->outputIsJava)
	{
		AllocJLVars(info, ILMethod_Signature(method), node->localVarSig);
	}
	else
	{
		DumpILLocals(info, outstream, node->localVarSig);
	}

	/* Dump the code within the body of the method */
	if(node->body)
	{
		if(info->outputIsJava)
		{
			JavaGenDiscard(node->body, info);
		}
		else
		{
			ILNode_GenDiscard(node->body, info);
		}
	}

	/* Don't bother with return logic or stack sizes if abstract or extern */
	if(!ILMethod_IsAbstract(method) && ILMethod_IsIL(method) && node->body)
	{
		if(!(info->outputIsJava))
		{
			/* Add an explicit return instruction if the body didn't */
			outputLabel = 0;
			if(!ILNodeEndsInReturn(node->body))
			{
				if(info->returnLabel != ILLabel_Undefined &&
				   info->returnType == ILMachineType_Void)
				{
					/* Use this point in the code for return labels
					   to prevent outputting two "ret"'s in a row */
					ILGenLabel(info, &(info->returnLabel));
					outputLabel = 1;
				}
				ILGenCast(info, ILMachineType_Void, info->returnType);
				ILGenSimple(info, IL_OP_RET);
				if(info->returnType != ILMachineType_Void)
				{
					ILGenAdjust(info, -1);
				}
			}

			/* If we have a return label, we need to output some final
			   code to return the contents of a temporary local variable.
			   This is used when returning from inside a "try" block */
			if(!outputLabel && info->returnLabel != ILLabel_Undefined)
			{
				ILGenLabel(info, &(info->returnLabel));
				if(info->returnType != ILMachineType_Void)
				{
					ILGenLoadLocal(info, info->returnVar);
					ILGenExtend(info, 1);
				}
				ILGenSimple(info, IL_OP_RET);
			}
		}
		else
		{
			/* Add an explicit return instruction if the body didn't */
			outputLabel = 0;
			if(!ILNodeEndsInReturn(node->body))
			{
				if(info->returnLabel != ILLabel_Undefined &&
				   info->returnType == ILMachineType_Void)
				{
					/* Use this point in the code for return labels
					   to prevent outputting two "ret"'s in a row */
					JavaGenLabel(info, &(info->returnLabel));
					outputLabel = 1;
				}
				JavaGenCast(info, ILMachineType_Void, info->returnType);
				JavaGenReturnInsn(info, info->returnType);
				if(info->returnType != ILMachineType_Void)
				{
					JavaGenAdjust(info, -JavaGenTypeSize(info->returnType));
				}
			}

			/* If we have a return label, we need to output some final
			   code to return the contents of a temporary local variable.
			   This is used when returning from inside a "try" block */
			if(!outputLabel && info->returnLabel != ILLabel_Undefined)
			{
				JavaGenLabel(info, &(info->returnLabel));
				if(info->returnType != ILMachineType_Void)
				{
					JavaGenLoadLocal(info, info->returnVar, info->returnType);
					JavaGenExtend(info, JavaGenTypeSize(info->returnType));
				}
				JavaGenReturnInsn(info, info->returnType);
			}

			/* Output the number of local variables to the method */
			fprintf(outstream, "\t.locals %u\n", JavaGenNumLocals(info));
		}

		/* Output the maximum stack height to the method */
		fprintf(outstream, "\t.maxstack %ld\n", info->maxStackHeight);
	}

	/* Dump the method terminator */
	fputs ("} // method ", outstream);
	ILDumpIdentifier(outstream, ILMethod_Name(method), 0, 0);
	putc('\n', outstream);

	/* Clear the stack heights */
	info->stackHeight = 0;
	info->maxStackHeight = 0;

	/* Clear the return type information */
	info->returnType = ILMachineType_Void;
	info->returnVar = -1;
	info->returnLabel = ILLabel_Undefined;

	/* Clear the temporary throw variable */
	info->throwVariable = -1;

	/* Clear the "goto" list */
	gotoEntry = info->gotoList;
	while(gotoEntry != 0)
	{
		nextGoto = gotoEntry->next;
		ILFree(gotoEntry);
		gotoEntry = nextGoto;
	}
	info->gotoList = 0;

	/* Clear the list of temporary variables */
	info->numTempVars = 0;
	info->tempLocalBase = 0;
}

%}

/* 
 * Generate discard code for method declarations.
 */
ILNode_GenDiscard(ILNode_MethodDeclaration)
{
	if(info->asmOutput && node->methodInfo)
	{
		MethodGenDiscard(info, info->asmOutput, node, node->methodInfo);
	}
}

/*
 * Generate discard code for property declarations.
 */
ILNode_GenDiscard(ILNode_PropertyDeclaration)
{
	FILE *outstream = info->asmOutput;
	ILMethod *methodInfo;

	if(outstream && node->propertyInfo)
	{
		/* Generate the code for the get method */
		if(node->getAccessor)
		{
			ILNode_GenDiscard(node->getAccessor, info);
		}

		/* Generate the code for the set method */
		if(node->setAccessor)
		{
			ILNode_GenDiscard(node->setAccessor, info);
		}

		/* Output the property declaration */
		fputs(".property ", outstream);
		ILDumpFlags(outstream, ILProperty_Attrs(node->propertyInfo),
					ILPropertyDefinitionFlags, 0);
		ILDumpMethodType(outstream, info->image,
					     ILProperty_Signature(node->propertyInfo),
					     IL_DUMP_QUOTE_NAMES, 0,
						 ILProperty_Name(node->propertyInfo), 0);
		fputs("\n{\n", outstream);
		if(node->getAccessor)
		{
			methodInfo = ((ILNode_MethodDeclaration *)(node->getAccessor))
								->methodInfo;
			fputs("\t.get ", outstream);
			ILDumpMethodType(outstream, info->image,
						     ILMethod_Signature(methodInfo),
						     IL_DUMP_QUOTE_NAMES, 0,
							 ILMethod_Name(methodInfo), 0);
			putc('\n', outstream);
		}
		if(node->setAccessor)
		{
			methodInfo = ((ILNode_MethodDeclaration *)(node->setAccessor))
								->methodInfo;
			fputs("\t.set ", outstream);
			ILDumpMethodType(outstream, info->image,
						     ILMethod_Signature(methodInfo),
						     IL_DUMP_QUOTE_NAMES, 0,
							 ILMethod_Name(methodInfo), 0);
			putc('\n', outstream);
		}
		fputs("} // property ", outstream);
		ILDumpIdentifier(outstream, ILProperty_Name(node->propertyInfo), 0, 0);
		putc('\n', outstream);
	}
}

ILNode_GenDiscard(ILNode_AccessorDeclaration)
{
	/* Nothing to do here: this is just a place-holder */
}

ILNode_GenDiscard(ILNode_EnumDeclaration)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_EnumMemberDeclaration)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_DelegateDeclaration)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_FormalParameter)
{
#if 0
	if (info->asmOutput)
	{
		/*FIXME attributes, parameter modifier */
		DumpTypeName(info->asmOutput, node->type);
		ILNode_GenDiscard(node->type, info);
		fputc(' ', info->asmOutput);
		fputs (ILQualIdentName (node->name, 1), info->asmOutput);
	}
#endif
}

ILNode_GenDiscard(ILNode_Attribute)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_AttrArgs)
{
	/* TODO */
}

ILNode_GenDiscard(ILNode_NamedArg)
{
	/* TODO */
}
