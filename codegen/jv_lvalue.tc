/*
 * jv_lvalue.tc - Identifier and l-value code generator for Java.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * Stub out identifier operations.  Identifier nodes must
 * be replaced with real l-value nodes prior to code generation.
 */
JavaGenValue(ILNode_Identifier),
JavaGenValue(ILNode_QualIdent)
{
	return ILMachineType_Void;
}
JavaGenDiscard(ILNode_Identifier),
JavaGenDiscard(ILNode_QualIdent),
JavaGenThen(ILNode_Identifier),
JavaGenThen(ILNode_QualIdent),
JavaGenElse(ILNode_Identifier),
JavaGenElse(ILNode_QualIdent)
{
}

/*
 * Generate discard code for local and argument variables.
 */
JavaGenDiscard(ILNode_LocalVar),
JavaGenDiscard(ILNode_ArgumentVar)
{
	/* Nothing needs to be done here */
}

/*
 * Generate discard code for a member access operator.
 */
JavaGenDiscard(ILNode_MemberAccess)
{
	/* Evaluate the object expression for its side-effects */
	JavaGenDiscard(node->expr1, info);
}

/*
 * Generate discard code for a base access operator.
 */
JavaGenDiscard(ILNode_BaseAccess)
{
	/* Nothing needs to be done here */
}

/*
 * Generate discard code for a field dereference operator.
 */
JavaGenDiscard(ILNode_DerefField)
{
	/* Evaluate the object expression for its side-effects */
	JavaGenDiscard(node->expr1, info);
}

/*
 * Generate discard code for a static field reference.
 */
JavaGenDiscard(ILNode_StaticField)
{
	/* Nothing to do here */
}

/*
 * Generate discard code for a member field reference.
 */
JavaGenDiscard(ILNode_MemberField)
{
	/* Evaluate the object expression for its side-effects only */
	JavaGenDiscard(node->expr, info);
}

/*
 * Generate value code for a local variable.
 */
JavaGenValue(ILNode_LocalVar)
{
	JavaGenLoadLocal(info, node->index, node->machineType);
	JavaGenAdjust(info, JavaGenTypeSize(node->machineType));
	return node->machineType;
}

/*
 * Generate value code for an argument variable.
 */
JavaGenValue(ILNode_ArgumentVar)
{
	JavaGenLoadArg(info, node->index, node->machineType);
	JavaGenAdjust(info, JavaGenTypeSize(node->machineType));
	return node->machineType;
}

/*
 * Generate value code for a member access operator.
 */
JavaGenValue(ILNode_MemberAccess)
{
	/* TODO */
	return node->machineType;
}

/*
 * Generate value code for a base access operator.
 */
JavaGenValue(ILNode_BaseAccess)
{
	/* TODO */
	return node->machineType;
}

/*
 * Generate value code for a base element operator.
 */
JavaGenValue(ILNode_BaseElement)
{
	/* TODO */
	return node->machineType;
}

/*
 * Generate value code for a field dereference operator.
 */
JavaGenValue(ILNode_DerefField)
{
	/* TODO */
	return node->machineType;
}

/*
 * Generate value code for a static field reference.
 */
JavaGenValue(ILNode_StaticField)
{
	ILMachineType type = ILTypeToMachineType(ILField_Type(node->field));
	JavaGenFieldRef(info, JAVA_OP_GETSTATIC, node->field);
	JavaGenAdjust(info, JavaGenTypeSize(type));
	return type;
}

/*
 * Generate value code for a member field reference.
 */
JavaGenValue(ILNode_MemberField)
{
	ILMachineType type = ILTypeToMachineType(ILField_Type(node->field));
	JavaGenCast(info, JavaGenValue(node->expr, info),
			    ILMachineType_ObjectRef);
	JavaGenFieldRef(info, JAVA_OP_GETFIELD, node->field);
	JavaGenAdjust(info, JavaGenTypeSize(type) - 1);
	return type;
}

/*
 * Generate value code for a static property reference.
 */
JavaGenValue(ILNode_StaticProperty)
{
	ILMethod *getter = ILProperty_Getter(node->property);
	ILType *signature = ILProperty_Signature(node->property);
	ILMachineType type = ILTypeToMachineType(signature->un.method.retType);
	JavaGenCallMethod(info, getter, info->stackHeight);
	JavaGenAdjust(info, JavaGenTypeSize(type) - 1);
	return type;
}

/*
 * Generate value code for a member property reference.
 */
JavaGenValue(ILNode_MemberProperty)
{
	ILMethod *getter = ILProperty_Getter(node->property);
	ILType *signature = ILProperty_Signature(node->property);
	ILMachineType type = ILTypeToMachineType(signature->un.method.retType);
	long saveStack = info->stackHeight;
	JavaGenCast(info, JavaGenValue(node->expr, info),
			    ILMachineType_ObjectRef);
	JavaGenCallMethod(info, getter, saveStack);
	JavaGenAdjust(info, JavaGenTypeSize(type) - 1);
	return type;
}

/*
 * Prepare to store into a local variable.
 */
JavaPrepare(ILNode_LocalVar),
JavaPrepare(ILNode_ArgumentVar)
{
	/* No preparation is needed for locals or arguments */
	return node->machineType;
}

/*
 * Prepare to store into a member access destination.
 */
JavaPrepare(ILNode_MemberAccess)
{
	/* TODO */
	return node->machineType;
}

/*
 * Prepare to store into a base access destination.
 */
JavaPrepare(ILNode_BaseAccess)
{
	/* TODO */
	return node->machineType;
}

/*
 * Prepare to store into a base element destination.
 */
JavaPrepare(ILNode_BaseElement)
{
	/* TODO */
	return node->machineType;
}

/*
 * Prepare to store into a field dereference destination.
 */
JavaPrepare(ILNode_DerefField)
{
	/* TODO */
	return node->machineType;
}

/*
 * Prepare to store into a static field reference.
 */
JavaPrepare(ILNode_StaticField)
{
	/* Nothing needs to be done here */
	return ILTypeToMachineType(ILField_Type(node->field));
}

/*
 * Prepare to store into a member field reference.
 */
JavaPrepare(ILNode_MemberField)
{
	JavaGenCast(info, JavaGenValue(node->expr, info),
			    ILMachineType_ObjectRef);
	return ILTypeToMachineType(ILField_Type(node->field));
}

/*
 * Prepare to store into a static property reference.
 */
JavaPrepare(ILNode_StaticProperty)
{
	/* Nothing needs to be done here */
	ILType *signature = ILProperty_Signature(node->property);
	return ILTypeToMachineType(signature->un.method.retType);
}

/*
 * Prepare to store into a member property reference.
 */
JavaPrepare(ILNode_MemberProperty)
{
	ILType *signature = ILProperty_Signature(node->property);
	JavaGenCast(info, JavaGenValue(node->expr, info),
			    ILMachineType_ObjectRef);
	return ILTypeToMachineType(signature->un.method.retType);
}

/*
 * Get and prepare to store into a local variable.
 */
JavaGetAndPrepare(ILNode_LocalVar)
{
	int size = JavaGenTypeSize(node->machineType);
	JavaGenLoadLocal(info, node->index, node->machineType);
	JavaGenAdjust(info, size);
	if(leave)
	{
		JavaGenDup(info, node->machineType);
	}
	return node->machineType;
}

/*
 * Get and prepare to store into an argument variable.
 */
JavaGetAndPrepare(ILNode_ArgumentVar)
{
	int size = JavaGenTypeSize(node->machineType);
	JavaGenLoadArg(info, node->index, node->machineType);
	JavaGenAdjust(info, size);
	if(leave)
	{
		JavaGenDup(info, node->machineType);
	}
	return node->machineType;
}

/*
 * Get and prepare to store into a member access destination.
 */
JavaGetAndPrepare(ILNode_MemberAccess)
{
	/* TODO */
	return node->machineType;
}

/*
 * Get and prepare to store into a base access destination.
 */
JavaGetAndPrepare(ILNode_BaseAccess)
{
	/* TODO */
	return node->machineType;
}

/*
 * Get and prepare to store into a base element destination.
 */
JavaGetAndPrepare(ILNode_BaseElement)
{
	/* TODO */
	return node->machineType;
}

/*
 * Get and prepare to store into a field dereference destination.
 */
JavaGetAndPrepare(ILNode_DerefField)
{
	/* TODO */
	return node->machineType;
}

/*
 * Get and prepare to store into a static field reference.
 */
JavaGetAndPrepare(ILNode_StaticField)
{
	ILMachineType type = ILTypeToMachineType(ILField_Type(node->field));
	JavaGenFieldRef(info, JAVA_OP_GETSTATIC, node->field);
	JavaGenAdjust(info, JavaGenTypeSize(type));
	if(leave)
	{
		JavaGenDup(info, type);
	}
	return type;
}

/*
 * Get and prepare to store into a member field reference.
 */
JavaGetAndPrepare(ILNode_MemberField)
{
	ILMachineType type = ILTypeToMachineType(ILField_Type(node->field));
	int size = JavaGenTypeSize(type);

	/* Generate the object reference */
	JavaGenCast(info, JavaGenValue(node->expr, info),
				ILMachineType_ObjectRef);

	/* Duplicate it and get the current value */
	JavaGenDup(info, type);
	JavaGenFieldRef(info, JAVA_OP_GETFIELD, node->field);
	JavaGenAdjust(info, size - 1);

	/* If the value should be left on the stack, then duplicate it */
	if(leave)
	{
		if(size == 1)
		{
			JavaGenSimple(info, JAVA_OP_DUP_X1);
		}
		else if(size == 2)
		{
			JavaGenSimple(info, JAVA_OP_DUP2_X1);
		}
		JavaGenAdjust(info, size);
	}

	/* Return the field's machine type to the caller */
	return type;
}

/*
 * Get and prepare to store into a static property reference.
 */
JavaGetAndPrepare(ILNode_StaticProperty)
{
	ILMethod *getter = ILProperty_Getter(node->property);
	ILMachineType type = ILTypeToMachineType
		(ILProperty_Signature(node->property)->un.method.retType);
	JavaGenCallMethod(info, getter, info->stackHeight);
	JavaGenAdjust(info, JavaGenTypeSize(type));
	if(leave)
	{
		JavaGenDup(info, type);
	}
	return type;
}

/*
 * Get and prepare to store into a member property reference.
 */
JavaGetAndPrepare(ILNode_MemberProperty)
{
	ILMethod *getter = ILProperty_Getter(node->property);
	ILType *signature = ILProperty_Signature(node->property);
	ILType *propType = signature->un.method.retType;
	ILMachineType type = ILTypeToMachineType(propType);
	int size = JavaGenTypeSize(type);
	long saveStack;

	/* Generate the object reference */
	saveStack = info->stackHeight;
	JavaGenCast(info, JavaGenValue(node->expr, info),
			    ILMachineType_ObjectRef);

	/* Duplicate the object reference and get the current value */
	JavaGenSimple(info, JAVA_OP_DUP);
	JavaGenAdjust(info, 1);
	JavaGenCallMethod(info, getter, saveStack);
	JavaGenAdjust(info, size - 1);

	/* Duplicate the current value if necessary */
	if(leave)
	{
		if(size == 1)
		{
			JavaGenSimple(info, JAVA_OP_DUP_X1);
		}
		else if(size == 2)
		{
			JavaGenSimple(info, JAVA_OP_DUP2_X1);
		}
		JavaGenAdjust(info, size);
	}

	/* Return the property's machine type to the caller */
	return type;
}

/*
 * Store into a local variable.
 */
JavaStore(ILNode_LocalVar)
{
	int size = JavaGenTypeSize(node->machineType);
	if(leave)
	{
		JavaGenDup(info, node->machineType);
	}
	JavaGenStoreLocal(info, node->index, node->machineType);
	JavaGenAdjust(info, -size);
}

/*
 * Store into an argument variable.
 */
JavaStore(ILNode_ArgumentVar)
{
	int size = JavaGenTypeSize(node->machineType);
	if(leave)
	{
		JavaGenDup(info, node->machineType);
	}
	JavaGenStoreArg(info, node->index, node->machineType);
	JavaGenAdjust(info, -size);
}

/*
 * Store into a member access destination.
 */
JavaStore(ILNode_MemberAccess)
{
	/* TODO */
}

/*
 * Store into a base access destination.
 */
JavaStore(ILNode_BaseAccess)
{
	/* TODO */
}

/*
 * Store into a base element destination.
 */
JavaStore(ILNode_BaseElement)
{
	/* TODO */
}

/*
 * Store into a field dereference destination.
 */
JavaStore(ILNode_DerefField)
{
	/* TODO */
}

/*
 * Store into a static field reference.
 */
JavaStore(ILNode_StaticField)
{
	ILMachineType type = ILTypeToMachineType(ILField_Type(node->field));
	int size = JavaGenTypeSize(type);
	if(leave)
	{
		JavaGenDup(info, type);
	}
	JavaGenFieldRef(info, JAVA_OP_PUTSTATIC, node->field);
	JavaGenAdjust(info, -size);
}

/*
 * Store into a member field reference.
 */
JavaStore(ILNode_MemberField)
{
	ILMachineType type = ILTypeToMachineType(ILField_Type(node->field));
	int size = JavaGenTypeSize(type);

	/* Duplicate the value on the stack if we need it afterwards */
	if(leave)
	{
		if(size == 1)
		{
			JavaGenSimple(info, JAVA_OP_DUP_X1);
		}
		else if(size == 2)
		{
			JavaGenSimple(info, JAVA_OP_DUP2_X1);
		}
		JavaGenAdjust(info, size);
	}

	/* Store the value into the field */
	JavaGenFieldRef(info, JAVA_OP_PUTFIELD, node->field);
	JavaGenAdjust(info, -(size + 1));
}

/*
 * Store into a static property reference.
 */
JavaStore(ILNode_StaticProperty)
{
	ILMethod *setter = ILProperty_Setter(node->property);
	ILType *signature = ILProperty_Signature(node->property);
	ILType *propType = signature->un.method.retType;
	ILMachineType type = ILTypeToMachineType(propType);
	int size = JavaGenTypeSize(type);
	if(leave)
	{
		JavaGenDup(info, type);
	}
	JavaGenCallMethod(info, setter, info->stackHeight - 1 - size);
	JavaGenAdjust(info, -(size + 1));
}

/*
 * Store into a member property reference.
 */
JavaStore(ILNode_MemberProperty)
{
	ILMethod *setter = ILProperty_Setter(node->property);
	ILType *signature = ILProperty_Signature(node->property);
	ILType *propType = signature->un.method.retType;
	ILMachineType type = ILTypeToMachineType(propType);
	int size = JavaGenTypeSize(type);

	/* Duplicate the top of stack if necessary */
	if(leave)
	{
		if(size == 1)
		{
			JavaGenSimple(info, JAVA_OP_DUP_X1);
		}
		else if(size == 2)
		{
			JavaGenSimple(info, JAVA_OP_DUP2_X1);
		}
		JavaGenAdjust(info, size);
	}

	/* Store the value into the property */
	JavaGenCallMethod(info, setter, info->stackHeight - 1 - size);
	JavaGenAdjust(info, -(size + 1));
}
