dnl Process this file with autoconf to produce a configure script.
AC_INIT(runtime/System/Object.cs)
AM_INIT_AUTOMAKE(pnetlib, 0.5.6)
AM_MAINTAINER_MODE

dnl Extra substitution variables.
AC_SUBST(CSANT)
AC_SUBST(CSANT_FLAGS)
AC_SUBST(CSHARP_COMPILER)
AC_SUBST(CSHARP_COMPILER_CYGWIN)
AC_SUBST(CSHARP_PLUGIN)
AC_SUBST(CSCC_FLAGS)
AC_SUBST(RESGEN)
AC_SUBST(RESGEN_FLAGS)
AC_SUBST(ILRUN)
AC_SUBST(ILFIND)
AC_SUBST(ASSEMBLY_LINKER)
AC_SUBST(PNET_PATH)

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PATH_PROG(CYGPATH, cygpath)
AC_PATH_PROG(TREECC, treecc,, ${prefix}/bin:$PATH)
if test -z "$TREECC" ; then
    echo "treecc is required to build and can be obtained from"
    echo "http://www.southern-storm.com.au/treecc.html"
    exit 1
fi

dnl The --with-pnet option can be used to specify the location of
dnl Portable.NET, so that we know where to get the C# compiler, etc.
dnl The default location is assumed to be "../pnet".
AC_ARG_WITH(pnet,
[  --with-pnet=DIR         specify the location of Portable.NET],
[
	if test -n "$withval"; then
		case "$withval" in
		  ../*) PNET_PATH="`pwd`/$withval" ;;
		     *) PNET_PATH="$withval" ;;
		esac
	else
		PNET_PATH="`pwd`/../pnet"
	fi
],
[
	PNET_PATH="`pwd`/../pnet"
])

dnl The --with-mstools option can be used to force the use of
dnl Microsoft's toolchain instead of Portable.NET's.
AC_ARG_WITH(mstools,
[  --with-mstools          use Microsoft tools instead of Portable.NET's],
[
	MSTOOLS=yes
],
[
	MSTOOLS=no
])

dnl The --with-profile=NAME option is used to change the build profile.
AC_SUBST(PROFILE_NAME)
AC_ARG_WITH(profile,
[  --with-profile=NAME     use build profile NAME],
[
	if test -f "${srcdir}/profiles/${withval}" ; then
		PROFILE_NAME="${withval}"
	else
		AC_MSG_ERROR(unknown build profile ${withval})
	fi
],
[
	PROFILE_NAME=full
])

dnl Find the Portable.NET "csant" program.
AC_PATH_PROG(CSANT, csant,, $PNET_PATH/csant:${prefix}/bin:$PATH)
if test "$CSANT" = "" ; then
	echo '**************************************************************'
	echo "Portable.NET's csant tool is required to build the system."
	echo "Use the --with-pnet option to specify Portable.NET's location."
	echo '**************************************************************'
	exit 1
fi

dnl Find the C# compiler to use.
if test "$MSTOOLS" = "no"; then
	AC_PATH_PROG(CSHARP_COMPILER, cscc,, $PNET_PATH/cscc:${prefix}/bin:$PATH)
	if test "$CSHARP_COMPILER" = "" ; then
		AC_PATH_PROG(CSHARP_COMPILER, csc)
		if test "$CSHARP_COMPILER" = ""; then
			echo '******************************************************'
			echo "Portable.NET's cscc or Microsoft's csc.exe is required"
			echo "to build.  Use the --with-pnet option to specify the"
			echo "location of the Portable.NET source tree."
			echo '******************************************************'
			exit 1
		fi
		CSANT_FLAGS='--compiler csc -Dcsc="$(CSHARP_COMPILER)" --profile "$(top_srcdir)/profiles/$(PROFILE_NAME)"'
		CSHARP_COMPILER_CYGWIN="$CSHARP_COMPILER"
	else
		AC_PATH_PROG(CSHARP_PLUGIN, cscc-cs,, $PNET_PATH/cscc:${prefix}/lib/cscc/plugins:${prefix}/bin:$PATH)
		if test "x$CYGPATH" = "x" ; then
			CSHARP_COMPILER_CYGWIN="$CSHARP_COMPILER"
		else
			# Convert the cscc and cscc-cs paths into their Windows
			# forms, to ensure that spawns from csant work correctly.
			CSHARP_COMPILER_CYGWIN="$CSHARP_COMPILER"
			CSHARP_COMPILER=`"$CYGPATH" -w "$CSHARP_COMPILER"`
			CSHARP_PLUGIN=`"$CYGPATH" -w "$CSHARP_PLUGIN"`
		fi
		CSANT_FLAGS='--compiler cscc -Dcscc="$(CSHARP_COMPILER)" -Dcscc.plugins.cs="$(CSHARP_PLUGIN)" --profile "$(top_srcdir)/profiles/$(PROFILE_NAME)"'
	fi
else
	AC_PATH_PROG(CSHARP_COMPILER, csc)
	if test "$CSHARP_COMPILER" = ""; then
		echo '***************************************************'
		echo "Could not locate Microsoft's C# compiler (csc.exe)."
		echo '***************************************************'
		exit 1
	fi
	CSANT_FLAGS='--compiler csc -Dcsc="$(CSHARP_COMPILER)" --profile "$(top_srcdir)/profiles/$(PROFILE_NAME)"'
	CSHARP_COMPILER_CYGWIN="$CSHARP_COMPILER"
fi

dnl Find the .NET resource generator to use.
if test "$MSTOOLS" = "no"; then
	AC_PATH_PROG(RESGEN, resgen,, $PNET_PATH/resgen:${prefix}/bin:$PATH)
	if test "$RESGEN" = "" ; then
		echo '**************************************************************'
		echo "Portable.NET's or Microsoft's resgen is required to build."
		echo "Use the --with-pnet option to specify Portable.NET's location."
		echo '**************************************************************'
		exit 1
	fi
else
	AC_PATH_PROG(RESGEN, resgen)
	if test "$RESGEN" = "" ; then
		echo '***********************************************************'
		echo "Could not locate Microsoft's resource utility (resgen.exe)."
		echo '***********************************************************'
		exit 1
	fi
fi

dnl Find the Microsoft "al" assembly linker, for satellite resources.
if test "$MSTOOLS" = "yes"; then
	AC_PATH_PROG(ASSEMBLY_LINKER, al)
else
	ASSEMBLY_LINKER=pnet
fi

dnl Determine which version of RESGEN we are using (Portable.NET or Microsoft).
RESGEN_ERROR=`"$RESGEN" -v.txt 2>&1`
case "$RESGEN_ERROR" in
  RESGEN*) RESGEN_FLAGS="-tR" ;;
        *) RESGEN_FLAGS="" ;;
esac
AM_CONDITIONAL(PNET_RESGEN, test "$RESGEN_FLAGS" != "")

dnl Find the Portable.NET runtime engine.
AC_PATH_PROG(ILRUN, ilrun,, $PNET_PATH/engine:${prefix}/bin:$PATH)
if test "$ILRUN" = "" ; then
	echo '**************************************************************'
	echo "Portable.NET is required to run the test suite."
	echo "Use the --with-pnet option to specify Portable.NET's location."
	echo '**************************************************************'
	exit 1
fi

dnl Find the Portable.NET ilfind program.
AC_PATH_PROG(ILFIND, ilfind,, $PNET_PATH/ilfind:${prefix}/bin:$PATH)
if test "$ILFIND" = "" ; then
	echo '**************************************************************'
	echo "Portable.NET's ilfind is required to build the system."
	echo "Use the --with-pnet option to specify Portable.NET's location."
	echo '**************************************************************'
	exit 1
fi

dnl Determine if the system supports reflection, because there
dnl are some things that we can't build or test without reflection.
REF_FLAG=`grep 'CONFIG_REFLECTION" value="true"' "${srcdir}/profiles/${PROFILE_NAME}"`
AM_CONDITIONAL(HAS_REFLECTION, test "x$REF_FLAG" != "x")

AC_OUTPUT([
Makefile
tools/Makefile
runtime/Makefile
I18N/Makefile
System/Makefile
System.Xml/Makefile
csunit/Makefile
csunit/TestVersion.cs
csupport/Makefile
compat/Makefile
JScript/Makefile
tests/Makefile
tests/System/Makefile
tests/System.Xml/Makefile
tests/runtime/Makefile
tests/JScript/Makefile
resources/Makefile
resources/en_US/Makefile
resources/en_US/runtime/Makefile
resources/en_US/I18N/Makefile
resources/en_US/System/Makefile
resources/en_US/System.Xml/Makefile
resources/de_DE/Makefile
resources/de_DE/runtime/Makefile
resources/de_DE/I18N/Makefile
resources/de_DE/System/Makefile
resources/de_DE/System.Xml/Makefile
samples/Makefile
samples/ilrun.sh
tools/run_test.sh
tools/link_res.sh
pnetlib.spec])

chmod +x "${srcdir}/tools/link_res.sh"
chmod +x "${srcdir}/samples/ilrun.sh"
