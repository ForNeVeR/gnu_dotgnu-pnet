/*
 * c_ainit.tc - Array initializer handling for C.
 *
 * Copyright (C) 2003  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

%{

/*
 * Look ahead to the next item in a list iteration.
 */
static ILNode *IterLookAhead(ILNode_ListIter *iter)
{
	ILNode_ListIter copy = *iter;
	return ILNode_ListIter_Next(&copy);
}

/*
 * Forward declaration.
 */
static int SkipInitializer(ILNode_ListIter *iter, ILType *type);

/*
 * Skip the initializer for an array type.  Returns zero if
 * the initializer does not have sufficient elements.
 */
static int SkipArrayInitializer(ILNode_ListIter *iter, ILType *type)
{
	ILNode *node;
	ILUInt32 numElems;
	ILType *elemType;

	/* Look ahead to see if we are at the end or a nested initializer */
	node = IterLookAhead(iter);
	if(!node)
	{
		return 0;
	}
	else if(yyisa(node, ILNode_CArrayInit))
	{
		/* Assume that the entire array is within the nested initializer */
		ILNode_ListIter_Next(iter);
		return 1;
	}

	/* Get the number of elements and the element type */
	numElems = CTypeGetNumElems(type);
	elemType = CTypeGetElemType(type);

	/* Recognize the elements, inline within the current array */
	while(numElems > 0)
	{
		if(!SkipInitializer(iter, elemType))
		{
			return 0;
		}
		--numElems;
	}
	return 1;
}

/*
 * Skip the initializer for a struct type.  Returns zero if
 * the initializer does not have sufficient elements.
 */
static int SkipStructInitializer(ILNode_ListIter *iter, ILType *type)
{
	ILClass *classInfo = ILType_ToValueType(ILTypeStripPrefixes(type));
	ILField *field;
	ILNode *node;

	/* If the next element is an array initializer, then assume that
	   it contains the entire structure in a nested scope */
	node = IterLookAhead(iter);
	if(node && yyisa(node, ILNode_CArrayInit))
	{
		ILNode_ListIter_Next(iter);
		return 1;
	}

	/* Skip the struct elements, which are inline within the parent array */
	field = 0;
	while((field = (ILField *)ILClassNextMemberByKind
				(classInfo, (ILMember *)field, IL_META_MEMBERKIND_FIELD)) != 0)
	{
		if(!ILField_IsStatic(field))
		{
			if(!SkipInitializer(iter, ILFieldGetTypeWithPrefixes(field)))
			{
				return 0;
			}
		}
	}
	return 1;
}

/*
 * Skip the initializer for a particular type.
 */
static int SkipInitializer(ILNode_ListIter *iter, ILType *type)
{
	if(CTypeIsStruct(type))
	{
		return SkipStructInitializer(iter, type);
	}
	else if(CTypeIsUnion(type))
	{
		/* Cannot use "union" types within array initializers */
		return 0;
	}
	else if(CTypeIsArray(type))
	{
		return SkipArrayInitializer(iter, type);
	}
	else
	{
		return (ILNode_ListIter_Next(iter) != 0);
	}
}

ILUInt32 CArrayInitializerSize(ILType *type, ILNode *init)
{
	ILType *elemType = CTypeGetElemType(type);
	ILNode *list = ((ILNode_CArrayInit *)init)->expr;
	ILNode_ListIter iter;
	ILUInt32 len = 0;

	/* Scan the list, skipping over elements as we find them.
	   Type checking of the elements is performed later */
	ILNode_ListIter_Init(&iter, list);
	while(IterLookAhead(&iter) != 0)
	{
		if(!SkipInitializer(&iter, elemType))
		{
			CCErrorOnLine(yygetfilename(init), yygetlinenum(init),
						  _("invalid array initializer"));
			return 1;
		}
		++len;
	}

	/* Return the final length to the caller */
	return len;
}

%}

/*
 * Perform semantic analysis for an array initialization expression.
 */
ILNode_CSemAnalysis(ILNode_CArrayInit)
{
	/* Not used - semantic analysis for initializers is handled elsewhere */
	return CSemValueError;
}

/*
 * Stub out code generation for array initializers.
 */
ILNode_GetType(ILNode_CArrayInit),
ILNode_GenValue(ILNode_CArrayInit),
JavaGenValue(ILNode_CArrayInit)
{
	return ILMachineType_Void;
}
