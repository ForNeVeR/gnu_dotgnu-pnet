/*
 * c_invoke.tc - Function invocation handling for C.
 *
 * Copyright (C) 2002  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * Perform semantic analysis on a function reference node.
 * This will only be called when the function is used as
 * a value rather than as part of a function invocation,
 * so we don't need to worry about forward references.
 */
ILNode_CSemAnalysis(ILNode_FunctionRef)
{
	CSemValue value;
	CSemSetRValue(value, node->signature);
	return value;
}

/*
 * Get the type of a function reference node.
 */
ILNode_GetType(ILNode_FunctionRef)
{
	return ILMachineType_UnmanagedPtr;
}

/*
 * Generate value code for a function reference node.
 */
ILNode_GenValue(ILNode_FunctionRef)
{
	if(info->asmOutput)
	{
		fputs("\tldftn\t", info->asmOutput);
		ILDumpMethodType(info->asmOutput, info->image, node->signature,
						 IL_DUMP_QUOTE_NAMES, 0, node->name, 0);
		putc('\n', info->asmOutput);
	}
	ILGenAdjust(info, 1);
	return ILMachineType_UnmanagedPtr;
}
JavaGenValue(ILNode_FunctionRef)
{
	/* Never called: nothing to do here */
	return ILMachineType_UnmanagedPtr;
}

/*
 * Perform semantic analysis for function invocation expressions.
 */
ILNode_CSemAnalysis(ILNode_InvocationExpression)
{
	/* TODO */
	return CSemValueError;
}

/*
 * Perform semantic analysis for C# invocation expressions.
 */
ILNode_CSemAnalysis(ILNode_CSharpInvocation)
{
	/* TODO */
	return CSemValueError;
}
