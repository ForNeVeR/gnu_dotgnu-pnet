/*
 * cs_decls.tc - Semantic analysis for C# class and type declarations.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * Perform semantic analysis for class definitions.
 */
ILNode_SemAnalysis(ILNode_ClassDefn)
{
	CSSemValue value;
	ILNode *savedClass;
	if(node->body)
	{
		savedClass = info->currentClass;
		info->currentClass = (ILNode *)node;
		if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
		{
			CSUnsafeEnter(info, (ILNode *)node, "unsafe class declaration");
		}
		value = ILNode_SemAnalysis(node->body, info, &(node->body));
		if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
		{
			CSUnsafeLeave(info);
		}
		info->currentClass = savedClass;
		return value;
	}
	else
	{
		value.kind = CS_SEMKIND_RVALUE;
		value.type = ILType_Int32;
		return value;
	}
}

/*
 * Perform semantic analysis for declaration scope changes.
 */
ILNode_SemAnalysis(ILNode_ScopeChange)
{
	CSSemValue value;
	if (node->body)
	{
		ILScope *oldscope = info->currentScope;
		info->currentScope = node->scope;
		value = ILNode_SemAnalysis(node->body, info, &(node->body));
		info->currentScope = oldscope;
	}
	else
	{
		value.kind = CS_SEMKIND_RVALUE;
		value.type = ILType_Int32;
	}
	return value;
}

/*
 * Perform semantic analysis for constant declaration.
 */
ILNode_SemAnalysis(ILNode_ConstDeclaration)
{
	CSSemValue value, valueChild;
	ILNode_ListIter iter;
	ILNode *child;

	/* Enter an unsafe context for the constant if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe constant declaration");
	}

	/* Warn if declaring the constant with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* FIXME: optional attributes ? */
	/* modifier already done in parser */
	value = ILNode_SemAnalysis(node->type, info, &(node->type));
	ILNode_ListIter_Init(&iter, node->constDeclarators);
	while ((child = ILNode_ListIter_Next(&iter)) != 0)
	{
		valueChild = ILNode_SemAnalysis(child, info, &(child));
		/*
		 * FIXME: need to verify that the constant expression type is
		 * consistent with the type declaration of the constant
		 */
	}

	/* Leave the unsafe context for the constant */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	return value;
}

ILNode_SemAnalysis(ILNode_ConstDeclarator)
{
	/* name is guaranteed to be an identifier by the parser */
	/* TODO: check that the constant hasn't been declared previously */

	/* expr should be a constant expression */
	return ILNode_SemAnalysis(node->expr, info, &(node->expr));
}

/*
 * Perform semantic analysis for field declaration.
 */
ILNode_SemAnalysis(ILNode_FieldDeclaration)
{
	/* Enter an unsafe context for the field if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe field declaration");
	}

	/* Warn if declaring the field with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* TODO: verify the initializers and check that there are no duplicates */

	/* Leave the unsafe context for the field */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	/* Fields don't really have a semantic value, so return the default */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_FieldDeclarator)
{
	/* Place-holder only: the real processing is done elsewhere */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_EventFieldDeclaration)
{
	CSSemValue value, valueChild;
	ILNode_ListIter iter;
	ILNode *child;

	/* Enter an unsafe context for the event field if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe event field declaration");
	}

	/* Warn if declaring the event field with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* FIXME: optional attributes ? */
	/* modifier already done in parser */
	value = ILNode_SemAnalysis(node->type, info, &(node->type));
	ILNode_ListIter_Init(&iter, node->varDeclarators);
	while ((child = ILNode_ListIter_Next(&iter)) != 0)
	{
		valueChild = ILNode_SemAnalysis(child, info, &(child));
		/*
		 * FIXME: need to verify that the optional initializers 
		 * of the fields are consistent with the type declaration
		 */
	}

	/* Leave the unsafe context for the event field */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	return value;
}

ILNode_SemAnalysis(ILNode_EventPropertyDeclaration)
{
	CSSemValue value;

	/* Enter an unsafe context for the event property if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node,
					  "unsafe event property declaration");
	}

	/* Warn if declaring the event property with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* FIXME: optional attributes ? */
	/* modifier already done in parser */
	value = ILNode_SemAnalysis(node->type, info, &(node->type));
	/* FIXME: qualifiedIdentifier */
	value = ILNode_SemAnalysis(node->addAccessor, info, &(node->addAccessor));
	value = ILNode_SemAnalysis(node->removeAccessor, info, &(node->removeAccessor));

	/* Leave the unsafe context for the event property */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	return value;
}

ILNode_SemAnalysis(ILNode_MethodDeclaration)
{
	ILNode *savedMethod;

	/* Record the current method that we are in */
	savedMethod = info->currentMethod;
	info->currentMethod = (ILNode *)node;

	/* Enter an unsafe context for the method if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe method declaration");
	}

	/* Warn if declaring the method with unsafe return or parameter types */
	if(CSHasUnsafeType(node->type) || CSHasUnsafeType(node->params))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

#if 0
	/* FIXME: optional attributes ? */
	/* modifier already done in parser */
	value = ILNode_SemAnalysis(node->type, info, &(node->type));
	/* FIXME: name, do we need to do anything */
	/* FIXME: I don't think we'll need to iterate over params here */
	value = ILNode_SemAnalysis(node->params, info, &(node->params));
#endif

	/* Perform semantic analysis on the method body */
	if(node->body)
	{
		ILNode_SemAnalysis(node->body, info, &(node->body));
	}

	/* Leave the unsafe context for the method */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	/* Return to the previous method level */
	info->currentMethod = savedMethod;

	/* Methods don't really have a semantic value, so return the default */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_PropertyDeclaration)
{
	CSSemValue value;
	ILNode_AccessorDeclaration *accessor;

	/* Enter an unsafe context for the property if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe property declaration");
	}

	/* Warn if declaring the property with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

#if 0
	/* FIXME: optional attributes ? */
	/* modifier already done in parser */
	value = ILNode_SemAnalysis(node->type, info, &(node->type));
	/* FIXME: name, do we need to do anything */
	value = ILNode_SemAnalysis(node->getAccessor, info, &(node->getAccessor));
	value = ILNode_SemAnalysis(node->setAccessor, info, &(node->setAccessor));
#endif

	/* Perform semantic analysis on the accessor bodies */
	if(node->getAccessor)
	{
		accessor = ((ILNode_AccessorDeclaration *)(node->getAccessor));
		if(accessor->body)
		{
			ILNode_SemAnalysis(accessor->body, info, &(accessor->body));
		}
	}
	if(node->setAccessor)
	{
		accessor = ((ILNode_AccessorDeclaration *)(node->setAccessor));
		if(accessor->body)
		{
			ILNode_SemAnalysis(accessor->body, info, &(accessor->body));
		}
	}

	/* Leave the unsafe context for the property */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	return value;
}

ILNode_SemAnalysis(ILNode_AccessorDeclaration)
{
	/* FIXME: optional attributes ? */
	return ILNode_SemAnalysis(node->body, info, &(node->body));
}

ILNode_SemAnalysis(ILNode_EnumDeclaration)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_EnumMemberDeclaration)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_DelegateDeclaration)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_FormalParameter)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_Attribute)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_AttrArgs)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_NamedArg)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_Argument)
{
	/* TODO */
	return CSSemValueDefault;
}
