/*
 * cs_decls.tc - Semantic analysis for C# class and type declarations.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * Perform semantic analysis for class definitions.
 */
ILNode_SemAnalysis(ILNode_ClassDefn)
{
	CSSemValue value;
	ILNode *savedClass;
	if(node->body)
	{
		savedClass = info->currentClass;
		info->currentClass = (ILNode *)node;
		if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
		{
			CSUnsafeEnter(info, (ILNode *)node, "unsafe class declaration");
		}
		value = ILNode_SemAnalysis(node->body, info, &(node->body));
		if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
		{
			CSUnsafeLeave(info);
		}
		info->currentClass = savedClass;
		return value;
	}
	else
	{
		value.kind = CS_SEMKIND_RVALUE;
		value.type = ILType_Int32;
		return value;
	}
}

/*
 * Perform semantic analysis for declaration scope changes.
 */
ILNode_SemAnalysis(ILNode_ScopeChange)
{
	CSSemValue value;
	if (node->body)
	{
		ILScope *oldscope = info->currentScope;
		info->currentScope = node->scope;
		value = ILNode_SemAnalysis(node->body, info, &(node->body));
		info->currentScope = oldscope;
	}
	else
	{
		value.kind = CS_SEMKIND_RVALUE;
		value.type = ILType_Int32;
	}
	return value;
}

/*
 * Perform semantic analysis for constant declaration.
 */
ILNode_SemAnalysis(ILNode_ConstDeclaration)
{
	CSSemValue value, valueChild;
	ILNode_ListIter iter;
	ILNode *child;

	/* Enter an unsafe context for the constant if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe constant declaration");
	}

	/* Warn if declaring the constant with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* FIXME: optional attributes ? */
	/* modifier already done in parser */
	value = ILNode_SemAnalysis(node->type, info, &(node->type));
	ILNode_ListIter_Init(&iter, node->constDeclarators);
	while ((child = ILNode_ListIter_Next(&iter)) != 0)
	{
		valueChild = ILNode_SemAnalysis(child, info, &(child));
		/*
		 * FIXME: need to verify that the constant expression type is
		 * consistent with the type declaration of the constant
		 */
	}

	/* Leave the unsafe context for the constant */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	return value;
}

ILNode_SemAnalysis(ILNode_ConstDeclarator)
{
	/* name is guaranteed to be an identifier by the parser */
	/* TODO: check that the constant hasn't been declared previously */

	/* expr should be a constant expression */
	return ILNode_SemAnalysis(node->expr, info, &(node->expr));
}

/*
 * Perform semantic analysis for field declaration.
 */
ILNode_SemAnalysis(ILNode_FieldDeclaration)
{
	/* Enter an unsafe context for the field if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe field declaration");
	}

	/* Warn if declaring the field with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* TODO: verify the initializers and check that there are no duplicates */

	/* Leave the unsafe context for the field */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	/* Fields don't really have a semantic value, so return the default */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_FieldDeclarator)
{
	/* Place-holder only: the real processing is done elsewhere */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_EventFieldDeclaration)
{
	CSSemValue value, valueChild;
	ILNode_ListIter iter;
	ILNode *child;

	/* Enter an unsafe context for the event field if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe event field declaration");
	}

	/* Warn if declaring the event field with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* FIXME: optional attributes ? */
	/* modifier already done in parser */
	value = ILNode_SemAnalysis(node->type, info, &(node->type));
	ILNode_ListIter_Init(&iter, node->varDeclarators);
	while ((child = ILNode_ListIter_Next(&iter)) != 0)
	{
		valueChild = ILNode_SemAnalysis(child, info, &(child));
		/*
		 * FIXME: need to verify that the optional initializers 
		 * of the fields are consistent with the type declaration
		 */
	}

	/* Leave the unsafe context for the event field */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	return value;
}

ILNode_SemAnalysis(ILNode_EventPropertyDeclaration)
{
	CSSemValue value;

	/* Enter an unsafe context for the event property if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node,
					  "unsafe event property declaration");
	}

	/* Warn if declaring the event property with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* FIXME: optional attributes ? */
	/* modifier already done in parser */
	value = ILNode_SemAnalysis(node->type, info, &(node->type));
	/* FIXME: qualifiedIdentifier */
	value = ILNode_SemAnalysis(node->addAccessor, info, &(node->addAccessor));
	value = ILNode_SemAnalysis(node->removeAccessor, info, &(node->removeAccessor));

	/* Leave the unsafe context for the event property */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	return value;
}

ILNode_SemAnalysis(ILNode_MethodDeclaration)
{
	ILNode *savedMethod;
	ILNode_NewScope *newScope;
	ILScope *scope;
	ILScope *savedScope;
	unsigned long argNum;
	ILNode_ListIter iter;
	ILNode_FormalParameter *param;
	ILScopeData *data;
	char *name;
	ILNode *errorNode;
	ILType *returnType;

	/* Record the current method that we are in */
	savedMethod = info->currentMethod;
	info->currentMethod = (ILNode *)node;

	/* Enter an unsafe context for the method if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe method declaration");
	}

	/* Warn if declaring the method with unsafe return or parameter types */
	if(CSHasUnsafeType(node->type) || CSHasUnsafeType(node->params))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* Get the method's local variable scope */
	if(node->body && yykind(node->body) == yykindof(ILNode_NewScope))
	{
		newScope = (ILNode_NewScope *)(node->body);
		if(!(newScope->scope))
		{
			newScope->scope = ILScopeCreate(info, info->currentScope);
		}
		scope = newScope->scope;
	}
	else
	{
		scope = ILScopeCreate(info, info->currentScope);
	}

	/* Declare the parameters into the method's local variable scope */
	if((node->modifiers & IL_META_METHODDEF_STATIC) == 0)
	{
		/* Non-static parameters start at argument 1 */
		argNum = 1;
	}
	else
	{
		/* Static parameters start at argument 0 */
		argNum = 0;
	}
	ILNode_ListIter_Init(&iter, node->params);
	while((param = (ILNode_FormalParameter *)ILNode_ListIter_Next(&iter)) != 0)
	{
		name = ILQualIdentName(param->name, 0);
		data = ILScopeLookup(scope, name, 0);
		if(data)
		{
			CSErrorOnLine(yygetfilename(param->name),
						  yygetlinenum(param->name),
						  "`%s' is already declared in this scope", name);
			errorNode = ILScopeDataGetNode(data);
			if(errorNode)
			{
				CSErrorOnLine(yygetfilename(errorNode),
							  yygetlinenum(errorNode),
							  "previous declaration here");
			}
		}
		else
		{
			ILScopeDeclareLocal(scope, name, argNum | CS_LOCAL_IS_ARG,
								param->name);
		}
		++argNum;
	}

	/* Perform semantic analysis on the method body */
	if(node->body)
	{
		savedScope = info->currentScope;
		info->currentScope = scope;
		ILNode_SemAnalysis(node->body, info, &(node->body));
		info->currentScope = savedScope;
	}

	/* If the return type is not void, then make sure that the
	   method ends in some kind of return statement */
	returnType = ILMethod_Signature(node->methodInfo)->un.method.retType;
	if(returnType != ILType_Void && node->body)
	{
		if(!ILMethod_IsAbstract(node->methodInfo) &&
		   ILMethod_IsIL(node->methodInfo))
		{
			if(!ILNodeEndsInReturn(node->body))
			{
				CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
							  "control reaches end of non-void method");
			}
		}
	}

	/* Leave the unsafe context for the method */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	/* Return to the previous method level */
	info->currentMethod = savedMethod;

	/* Methods don't really have a semantic value, so return the default */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_PropertyDeclaration)
{
	/* Enter an unsafe context for the property if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe property declaration");
	}

	/* Warn if declaring the property with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* Perform semantic analysis on the accessor bodies */
	if(node->getAccessor)
	{
		ILNode_SemAnalysis(node->getAccessor, info, &(node->getAccessor));
	}
	if(node->setAccessor)
	{
		ILNode_SemAnalysis(node->setAccessor, info, &(node->setAccessor));
	}

	/* Leave the unsafe context for the property */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_AccessorDeclaration)
{
	/* FIXME: optional attributes ? */
	return ILNode_SemAnalysis(node->body, info, &(node->body));
}

ILNode_SemAnalysis(ILNode_EnumDeclaration)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_EnumMemberDeclaration)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_DelegateDeclaration)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_FormalParameter)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_Attribute)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_AttrArgs)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_NamedArg)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_Argument)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_DocComment)
{
	/* Nothing to do here */
	return CSSemValueDefault;
}
