/*
 * cs_decls.tc - Semantic analysis for C# class and type declarations.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * Perform semantic analysis for class definitions.
 */
ILNode_SemAnalysis(ILNode_ClassDefn)
{
	CSSemValue value;
	ILNode *savedClass;
	ILNode *savedNamespace;
	if(node->body)
	{
		savedClass = info->currentClass;
		savedNamespace = info->currentNamespace;
		info->currentClass = (ILNode *)node;
		info->currentNamespace = node->namespaceNode;
		if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
		{
			CSUnsafeEnter(info, (ILNode *)node, "unsafe class declaration");
		}
		value = ILNode_SemAnalysis(node->body, info, &(node->body));
		if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
		{
			CSUnsafeLeave(info);
		}
		info->currentClass = savedClass;
		info->currentNamespace = savedNamespace;
		return value;
	}
	else
	{
		value.kind = CS_SEMKIND_RVALUE;
		value.type = ILType_Int32;
		return value;
	}
}

/*
 * Perform semantic analysis for declaration scope changes.
 */
ILNode_SemAnalysis(ILNode_ScopeChange)
{
	CSSemValue value;
	if (node->body)
	{
		ILScope *oldscope = info->currentScope;
		info->currentScope = node->scope;
		value = ILNode_SemAnalysis(node->body, info, &(node->body));
		info->currentScope = oldscope;
	}
	else
	{
		value.kind = CS_SEMKIND_RVALUE;
		value.type = ILType_Int32;
	}
	return value;
}

%{

/*
 * Attach a constant value to a field.
 */
static void AddConstantValue(ILGenInfo *info, ILField *field,
							 ILEvalValue *evalValue)
{
	unsigned char constBuf[18];
	int constBufLen;
	int constElemType;
	ILConstant *constant;
	ILType *type;
	ILMethod *ctor;
	ILAttribute *attr;
	int posn, wlen;
	unsigned char *newStr;
	unsigned char *tempStr;

	switch(evalValue->valueType)
	{
		case ILMachineType_Boolean:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i4Value);
			constBufLen = 1;
			constElemType = IL_META_ELEMTYPE_BOOLEAN;
		}
		break;

		case ILMachineType_Int8:
		case ILMachineType_UInt8:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i4Value);
			constBufLen = 1;
			constElemType = IL_META_ELEMTYPE_I1;
		}
		break;

		case ILMachineType_Int16:
		case ILMachineType_UInt16:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i4Value);
			constBuf[1] =
				(unsigned char)(evalValue->un.i4Value >> 8);
			constBufLen = 2;
			constElemType = IL_META_ELEMTYPE_I2;
		}
		break;

		case ILMachineType_Char:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i4Value);
			constBuf[1] =
				(unsigned char)(evalValue->un.i4Value >> 8);
			constBufLen = 2;
			constElemType = IL_META_ELEMTYPE_CHAR;
		}
		break;

		case ILMachineType_Int32:
		case ILMachineType_UInt32:
		case ILMachineType_NativeInt:
		case ILMachineType_NativeUInt:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i4Value);
			constBuf[1] =
				(unsigned char)(evalValue->un.i4Value >> 8);
			constBuf[2] =
				(unsigned char)(evalValue->un.i4Value >> 16);
			constBuf[3] =
				(unsigned char)(evalValue->un.i4Value >> 24);
			constBufLen = 4;
			constElemType = IL_META_ELEMTYPE_I4;
		}
		break;

		case ILMachineType_Int64:
		case ILMachineType_UInt64:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i8Value);
			constBuf[1] =
				(unsigned char)(evalValue->un.i8Value >> 8);
			constBuf[2] =
				(unsigned char)(evalValue->un.i8Value >> 16);
			constBuf[3] =
				(unsigned char)(evalValue->un.i8Value >> 24);
			constBuf[4] =
				(unsigned char)(evalValue->un.i8Value >> 32);
			constBuf[5] =
				(unsigned char)(evalValue->un.i8Value >> 40);
			constBuf[6] =
				(unsigned char)(evalValue->un.i8Value >> 48);
			constBuf[7] =
				(unsigned char)(evalValue->un.i8Value >> 56);
			constBufLen = 8;
			constElemType = IL_META_ELEMTYPE_I8;
		}
		break;

		case ILMachineType_Float32:
		{
			IL_WRITE_FLOAT(constBuf, evalValue->un.r4Value);
			constBufLen = 4;
			constElemType = IL_META_ELEMTYPE_R4;
		}
		break;

		case ILMachineType_Float64:
		case ILMachineType_NativeFloat:
		{
			IL_WRITE_DOUBLE(constBuf, evalValue->un.r8Value);
			constBufLen = 8;
			constElemType = IL_META_ELEMTYPE_R8;
		}
		break;

		case ILMachineType_Decimal:
		{
			/* Attach "DecimalConstantAttribute" to the field */
			static ILType * const decConstArgs[5] =
				{ILType_UInt8, ILType_UInt8, ILType_UInt32,
				 ILType_UInt32, ILType_UInt32};
			type = ILFindNonSystemType(info, "DecimalConstantAttribute",
									   "System.Runtime.CompilerServices");
			if(type && ILType_IsClass(type))
			{
				ctor = ILResolveConstructor(ILType_ToClass(type),
											ILField_Owner(field),
											(ILType **)decConstArgs, 5);
				if(ctor)
				{
					/* Build the attribute value for the constant */
					constBuf[0] = 0x01;
					constBuf[1] = 0x00;
					constBuf[2] = (unsigned char)
						(evalValue->un.decValue.flags >> 16);
					constBuf[3] = (unsigned char)
						(evalValue->un.decValue.flags >> 24);
					IL_WRITE_UINT32(constBuf + 4, evalValue->un.decValue.high);
					IL_WRITE_UINT32(constBuf + 8,
								    evalValue->un.decValue.middle);
					IL_WRITE_UINT32(constBuf + 12, evalValue->un.decValue.low);
					constBuf[16] = 0x00;
					constBuf[17] = 0x00;

					/* Create and attach the attribute */
					if((attr = ILAttributeCreate
							(ILProgramItem_Image(field), 0)) == 0)
					{
						CSOutOfMemory();
					}
					ILAttributeSetType(attr, ILToProgramItem(ctor));
					if(!ILAttributeSetValue(attr, constBuf, 18))
					{
						CSOutOfMemory();
					}
					ILProgramItemAddAttribute(ILToProgramItem(field), attr);
				}
			}
			return;
		}
		break;

		case ILMachineType_String:
		{
			/* Detect "null" string constants specially */
			if(!(evalValue->un.strValue.str))
			{
				constBuf[0] = 0;
				constBuf[1] = 0;
				constBuf[2] = 0;
				constBuf[3] = 0;
				constBufLen = 4;
				constElemType = IL_META_ELEMTYPE_CLASS;
				break;
			}

			/* Determine the length of string in UTF-16 characters */
			posn = 0;
			wlen = 0;
			while(posn < evalValue->un.strValue.len)
			{
				wlen += ILUTF16WriteChar
					(0, ILUTF8ReadChar(evalValue->un.strValue.str,
									   evalValue->un.strValue.len, &posn));
			}

			/* Allocate temporary storage for the UTF-16 version */
			newStr = (unsigned char *)ILMalloc(wlen * 2 + 1);
			if(!newStr)
			{
				CSOutOfMemory();
			}

			/* Convert the string from UTF-8 into UTF-16 */
			posn = 0;
			tempStr = newStr;
			while(posn < evalValue->un.strValue.len)
			{
				tempStr += ILUTF16WriteCharAsBytes
					(tempStr, ILUTF8ReadChar
						(evalValue->un.strValue.str,
					     evalValue->un.strValue.len, &posn));
			}

			/* Attach the constant to the field */
			constant = ILConstantCreate(info->image, 0, (ILProgramItem *)field,
										IL_META_ELEMTYPE_STRING);
			if(!constant)
			{
				CSOutOfMemory();
			}
			if(!ILConstantSetValue(constant, newStr, wlen * 2))
			{
				CSOutOfMemory();
			}
			ILFree(newStr);
			return;
		}
		break;

		case ILMachineType_ObjectRef:
		{
			/* This is the "null" constant */
			constBuf[0] = 0;
			constBuf[1] = 0;
			constBuf[2] = 0;
			constBuf[3] = 0;
			constBufLen = 4;
			constElemType = IL_META_ELEMTYPE_CLASS;
		}
		break;

		default:
		{
			constBuf[0] = 0;
			constBufLen = 1;
			constElemType = IL_META_ELEMTYPE_I1;
		}
		break;
	}
	constant = ILConstantCreate(info->image, 0, (ILProgramItem *)field,
								constElemType);
	if(!constant)
	{
		CSOutOfMemory();
	}
	if(!ILConstantSetValue(constant, constBuf, constBufLen))
	{
		CSOutOfMemory();
	}
}

%}

/*
 * Perform semantic analysis for field declaration.
 */
ILNode_SemAnalysis(ILNode_FieldDeclaration)
{
	ILNode_ListIter iterator;
	ILNode_FieldDeclarator *decl;
	CSSemValue value;
	ILEvalValue evalValue;

	/* Enter an unsafe context for the field if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		if((node->modifiers & IL_META_FIELDDEF_LITERAL) != 0)
		{
			CSUnsafeEnter(info, (ILNode *)node, "unsafe constant declaration");
		}
		else
		{
			CSUnsafeEnter(info, (ILNode *)node, "unsafe field declaration");
		}
	}

	/* Warn if declaring the field with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* Verify the initializers */
	ILNode_ListIter_Init(&iterator, node->fieldDeclarators);
	while((decl = (ILNode_FieldDeclarator *)
						ILNode_ListIter_Next(&iterator)) != 0)
	{
		/* Skip the field if no initializer or ILField block */
		if(!(decl->initializer) || !(decl->fieldInfo))
		{
			continue;
		}

		/* Perform semantic analysis on the initializer value */
		value = ILNode_SemAnalysis(decl->initializer, info,
								   &(decl->initializer));
		if(!CSIsSemValue(value.kind))
		{
			CSErrorOnLine(yygetfilename(decl->initializer),
						  yygetlinenum(decl->initializer),
						  "initializer is not a value");
			continue;
		}

		/* Make sure that the value is compatible with the field's type */
		if(!ILCoerce(info, decl->initializer, &(decl->initializer),
					 value.type, ILField_Type(decl->fieldInfo)))
		{
			CSErrorOnLine(yygetfilename(decl->initializer),
						  yygetlinenum(decl->initializer),
			  			  "incompatible types in initialization: "
			  					"no conversion from `%s' to `%s'",
			  			  CSTypeToName(value.type),
						  CSTypeToName(ILField_Type(decl->fieldInfo)));
			continue;
		}

		/* The field must be static to have an initial value */
		if((node->modifiers & IL_META_FIELDDEF_STATIC) == 0)
		{
			CSErrorOnLine(yygetfilename(decl->initializer),
						  yygetlinenum(decl->initializer),
						  "initializer used on non-static field");
			continue;
		}

		/* If this is a constant, then evaluate the value */
		if((node->modifiers & IL_META_FIELDDEF_LITERAL) != 0)
		{
			/* Check that the literal value is actually constant */
			if(!ILNode_EvalConst(decl->initializer, info, &evalValue) ||
			   !ILGenCastConst(info, &evalValue, evalValue.valueType,
	                   ILTypeToMachineType(ILField_Type(decl->fieldInfo))))
			{
				CSErrorOnLine(yygetfilename(decl->initializer),
							  yygetlinenum(decl->initializer),
							  "initializer is not constant");
				continue;
			}

			/* Decimal constants are stored in readonly fields
			   which are computed at runtime.  We also add a
			   "DecimalConstantAttribute" to tag the field so
			   that the compiler can reload the value later */
			if(evalValue.valueType == ILMachineType_Decimal)
			{
				node->modifiers &= ~IL_META_FIELDDEF_LITERAL;
				node->modifiers |= IL_META_FIELDDEF_INIT_ONLY;
				ILMemberSetAttrs((ILMember *)(decl->fieldInfo),
								 IL_META_FIELDDEF_LITERAL |
								 		IL_META_FIELDDEF_INIT_ONLY,
						 		 IL_META_FIELDDEF_INIT_ONLY);
				AddConstantValue(info, decl->fieldInfo, &evalValue);
			}
			else
			{
				/* Record the constant value so the compiler can pick
				   it up when the binary form of the code is reloaded */
				AddConstantValue(info, decl->fieldInfo, &evalValue);
				continue;
			}
		}

		/* Add a statement to the static constructor to initialize the field */
	}

	/* TODO: check that there are no duplicate definitions */

	/* Leave the unsafe context for the field */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	/* Fields don't really have a semantic value, so return the default */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_FieldDeclarator)
{
	/* Place-holder only: the real processing is done elsewhere */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_EventFieldDeclaration)
{
	CSSemValue value, valueChild;
	ILNode_ListIter iter;
	ILNode *child;

	/* Enter an unsafe context for the event field if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe event field declaration");
	}

	/* Warn if declaring the event field with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* FIXME: optional attributes ? */
	/* modifier already done in parser */
	value = ILNode_SemAnalysis(node->type, info, &(node->type));
	ILNode_ListIter_Init(&iter, node->varDeclarators);
	while ((child = ILNode_ListIter_Next(&iter)) != 0)
	{
		valueChild = ILNode_SemAnalysis(child, info, &(child));
		/*
		 * FIXME: need to verify that the optional initializers 
		 * of the fields are consistent with the type declaration
		 */
	}

	/* Leave the unsafe context for the event field */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	return value;
}

ILNode_SemAnalysis(ILNode_EventPropertyDeclaration)
{
	CSSemValue value;

	/* Enter an unsafe context for the event property if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node,
					  "unsafe event property declaration");
	}

	/* Warn if declaring the event property with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* FIXME: optional attributes ? */
	/* modifier already done in parser */
	value = ILNode_SemAnalysis(node->type, info, &(node->type));
	/* FIXME: qualifiedIdentifier */
	value = ILNode_SemAnalysis(node->addAccessor, info, &(node->addAccessor));
	value = ILNode_SemAnalysis(node->removeAccessor, info, &(node->removeAccessor));

	/* Leave the unsafe context for the event property */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	return value;
}

ILNode_SemAnalysis(ILNode_MethodDeclaration)
{
	ILNode *savedMethod;
	ILNode_NewScope *newScope;
	ILScope *scope;
	ILScope *savedScope;
	unsigned long argNum;
	ILNode_ListIter iter;
	ILNode_FormalParameter *param;
	ILScopeData *data;
	char *name;
	ILNode *errorNode;
	ILType *returnType;

	/* Record the current method that we are in */
	savedMethod = info->currentMethod;
	info->currentMethod = (ILNode *)node;

	/* Enter an unsafe context for the method if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe method declaration");
	}

	/* Warn if declaring the method with unsafe return or parameter types */
	if(CSHasUnsafeType(node->type) || CSHasUnsafeType(node->params))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* Get the method's local variable scope */
	if(node->body && yykind(node->body) == yykindof(ILNode_NewScope))
	{
		newScope = (ILNode_NewScope *)(node->body);
		if(!(newScope->scope))
		{
			newScope->scope = ILScopeCreate(info, info->currentScope);
		}
		scope = newScope->scope;
	}
	else
	{
		scope = ILScopeCreate(info, info->currentScope);
	}

	/* Declare the parameters into the method's local variable scope */
	if((node->modifiers & IL_META_METHODDEF_STATIC) == 0)
	{
		/* Non-static parameters start at argument 1 */
		argNum = 1;
	}
	else
	{
		/* Static parameters start at argument 0 */
		argNum = 0;
	}
	ILNode_ListIter_Init(&iter, node->params);
	while((param = (ILNode_FormalParameter *)ILNode_ListIter_Next(&iter)) != 0)
	{
		name = ILQualIdentName(param->name, 0);
		data = ILScopeLookup(scope, name, 0);
		if(data)
		{
			CSErrorOnLine(yygetfilename(param->name),
						  yygetlinenum(param->name),
						  "`%s' is already declared in this scope", name);
			errorNode = ILScopeDataGetNode(data);
			if(errorNode)
			{
				CSErrorOnLine(yygetfilename(errorNode),
							  yygetlinenum(errorNode),
							  "previous declaration here");
			}
		}
		else
		{
			ILScopeDeclareLocal(scope, name, argNum | CS_LOCAL_IS_ARG,
								param->name);
		}
		++argNum;
	}

	/* Perform semantic analysis on the method body */
	if(node->body)
	{
		savedScope = info->currentScope;
		info->currentScope = scope;
		ILNode_SemAnalysis(node->body, info, &(node->body));
		info->currentScope = savedScope;
	}

	/* If the return type is not void, then make sure that the
	   method ends in some kind of return statement */
	returnType = ILMethod_Signature(node->methodInfo)->un.method.retType;
	if(returnType != ILType_Void && node->body)
	{
		if(!ILMethod_IsAbstract(node->methodInfo) &&
		   ILMethod_IsIL(node->methodInfo))
		{
			if(!ILNodeEndsInReturn(node->body))
			{
				CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
							  "control reaches end of non-void method");
			}
		}
	}

	/* Leave the unsafe context for the method */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	/* Return to the previous method level */
	info->currentMethod = savedMethod;

	/* Methods don't really have a semantic value, so return the default */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_PropertyDeclaration)
{
	/* Enter an unsafe context for the property if necessary */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeEnter(info, (ILNode *)node, "unsafe property declaration");
	}

	/* Warn if declaring the property with an unsafe type */
	if(CSHasUnsafeType(node->type))
	{
		CSUnsafeTypeMessage(info, (ILNode *)node);
	}

	/* Perform semantic analysis on the accessor bodies */
	if(node->getAccessor)
	{
		ILNode_SemAnalysis(node->getAccessor, info, &(node->getAccessor));
	}
	if(node->setAccessor)
	{
		ILNode_SemAnalysis(node->setAccessor, info, &(node->setAccessor));
	}

	/* Leave the unsafe context for the property */
	if((node->modifiers & CS_SPECIALATTR_UNSAFE) != 0)
	{
		CSUnsafeLeave(info);
	}

	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_AccessorDeclaration)
{
	/* FIXME: optional attributes ? */
	return ILNode_SemAnalysis(node->body, info, &(node->body));
}

ILNode_SemAnalysis(ILNode_EnumMemberDeclaration)
{
	CSSemValue value;
	ILEvalValue evalValue;
	ILType *type;
	ILMachineType machineType;
	ILNode_ClassDefn *defn = ((ILNode_ClassDefn *)(info->currentClass));

	/* Determine the type of the enumeration */
	type = ILClassToType(defn->classInfo);
	machineType = ILTypeToMachineType(type);

	/* Perform semantic analysis on the enum member value */
	if(node->value)
	{
		/* An enumerated value has been supplied */
		value = ILNode_SemAnalysis(node->value, info, &(node->value));
		if(!CSIsSemValue(value.kind))
		{
			CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
						  "invalid enumerated value");
			return CSSemValueDefault;
		}
		else
		{
			/* Compute the constant value */
			if(!ILNode_EvalConst(node->value, info, &evalValue) ||
			   !ILGenCastConst(info, &evalValue, evalValue.valueType,
	                   		   machineType))
			{
				CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
							  "enumerated value is not constant");
				return CSSemValueDefault;
			}

			/* Set the constant value on the field definition */
			AddConstantValue(info, node->fieldInfo, &evalValue);

			/* Update the next enumerated value in sequence */
			switch(machineType)
			{
				case ILMachineType_Int8:
				case ILMachineType_UInt8:
				case ILMachineType_Int16:
				case ILMachineType_UInt16:
				case ILMachineType_Int32:
				{
					defn->nextEnum = (ILUInt64)(ILInt64)(evalValue.un.i4Value);
				}
				break;

				case ILMachineType_UInt32:
				{
					defn->nextEnum = (ILUInt64)(ILUInt32)(evalValue.un.i4Value);
				}
				break;

				case ILMachineType_Int64:
				{
					defn->nextEnum = (ILUInt64)(evalValue.un.i8Value);
				}
				break;

				case ILMachineType_UInt64:
				{
					defn->nextEnum = (ILUInt64)(evalValue.un.i8Value);
				}
				break;

				default: break;
			}
			++(defn->nextEnum);
		}
	}
	else
	{
		/* Use the next enumerated value in sequence */
		evalValue.valueType = machineType;
		switch(machineType)
		{
			case ILMachineType_Int8:
			case ILMachineType_UInt8:
			case ILMachineType_Int16:
			case ILMachineType_UInt16:
			case ILMachineType_Int32:
			case ILMachineType_UInt32:
			{
				evalValue.un.i4Value = (ILInt32)(defn->nextEnum);
			}
			break;

			case ILMachineType_Int64:
			case ILMachineType_UInt64:
			{
				evalValue.un.i8Value = (ILInt64)(defn->nextEnum);
			}
			break;

			default: break;
		}
		AddConstantValue(info, node->fieldInfo, &evalValue);
		++(defn->nextEnum);
	}

	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_DelegateDeclaration)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_FormalParameter)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_Attribute)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_AttrArgs)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_NamedArg)
{
	/* TODO */
	return CSSemValueDefault;
}

ILNode_SemAnalysis(ILNode_DocComment)
{
	/* Nothing to do here */
	return CSSemValueDefault;
}
