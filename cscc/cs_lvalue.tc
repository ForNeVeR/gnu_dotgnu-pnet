/*
 * cs_lvalue.tc - Semantic analysis for C# identifiers and l-values.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * Perform semantic analysis for the "this" expression.
 */
ILNode_SemAnalysis(ILNode_This)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for the "new scope" statement.
 */
ILNode_SemAnalysis(ILNode_NewScope)
{
	CSSemValue value;
	StmtSem(node->stmt, info, &(node->stmt));
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for singleton identifiers.
 */
ILNode_SemAnalysis(ILNode_Identifier)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for qualified identifiers.
 */
ILNode_SemAnalysis(ILNode_QualIdent)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for member access operators.
 */
ILNode_SemAnalysis(ILNode_MemberAccess)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for base member access operators.
 */
ILNode_SemAnalysis(ILNode_BaseAccess)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for base element access operators.
 */
ILNode_SemAnalysis(ILNode_BaseElement)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for an unsafe pointer field dereference.
 */
ILNode_SemAnalysis(ILNode_DerefField)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}
