/*
 * cs_lvalue.tc - Semantic analysis for C# identifiers and l-values.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * Perform semantic analysis for the "this" expression.
 */
ILNode_SemAnalysis(ILNode_This)
{
	CSSemValue value;
	ILNode_MethodDeclaration *method;

	/* Find the method declaration */
	method = (ILNode_MethodDeclaration *)(info->currentMethod);

	/* If the method is static, then we cannot use "this" */
	if((method->modifiers & IL_META_METHODDEF_STATIC) != 0)
	{
		CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "cannot use `this' in static methods");
	}

	/* Get the type from the method's class and return */
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_FromClass(ILMethod_Owner(method->methodInfo));
	return value;
}

/*
 * Perform semantic analysis for the "new scope" statement.
 */
ILNode_SemAnalysis(ILNode_NewScope)
{
	CSSemValue value;
	ILScope *savedScope = info->currentScope;
	if(!(node->scope))
	{
		node->scope = ILScopeCreate(info, savedScope);
	}
	info->currentScope = node->scope;
	StmtSem(node->stmt, info, &(node->stmt));
	info->currentScope = savedScope;
	value.kind = CS_SEMKIND_VOID;
	value.type = 0;
	return value;
}

%{

/*
 * Report an accessibility error.
 */
static void AccessibilityError(ILNode *node, const char *name,
							   ILClass *classInfo)
{
	const char *namespace = ILClass_Namespace(classInfo);
	CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
				  "`%s%s%s.%s' is not accessible in the current scope",
				  (namespace ? namespace : ""),
				  (namespace ? "." : ""), ILClass_Name(classInfo), name);
}

%}

/*
 * Perform semantic analysis for singleton identifiers.
 */
ILNode_SemAnalysis(ILNode_Identifier)
{
	CSSemValue value;
	ILScopeData *data;
	ILClass *classInfo;
	unsigned long index;
	ILNode_MethodDeclaration *method;
	ILField *field;

	/* Look up the identifier in the current scope */
	data = ILScopeLookup(info->currentScope, node->name, 1);
	if(!data)
	{
		CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "`%s' is not declared in the current scope");
		return CSSemValueDefault;
	}

	/* If there are other values with this name, and it isn't
	   a method, then the reference is ambiguous */
	if(ILScopeNextItem(data))
	{
		if(ILScopeDataGetKind(data) != IL_SCOPE_METHOD)
		{
			CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
						  "`%s' is ambiguous in the current scope",
						  node->name);
			return CSSemValueDefault;
		}
	}

	/* Determine what kind of item we have */
	switch(ILScopeDataGetKind(data))
	{
#if 0
		case IL_SCOPE_SUBSCOPE:
		case IL_SCOPE_LINKED_SCOPE:
		{
			/* Some kind of namespace scope */
			value.kind = CS_SEMKIND_SCOPE;
			value.type = (ILType *)(ILScopeDataGetSubScope(data));
		}
		break;
#endif

		case IL_SCOPE_IMPORTED_TYPE:
		case IL_SCOPE_DECLARED_TYPE:
		{
			/* A type that has been imported from a library,
			   or that has been declared in this program */
			classInfo = ILScopeDataGetClass(data);
			if(classInfo)
			{
				value.kind = CS_SEMKIND_TYPE;
				value.type = ILClassToType(classInfo);
			}
			else
			{
				CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
							  "type is not fully defined");
				value = CSSemValueDefault;
			}
		}
		break;

		case IL_SCOPE_FIELD:
		{
			/* Reference to a class field */
			if(!(info->currentMethod))
			{
				/* We are performing semantic analysis of declarations,
				   which does not permit fields to be used as types */
				CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "`%s' is not declared as a type in the current scope",
					  node->name);
				value.kind = CS_SEMKIND_TYPE;
				value.type = ILType_Int32;
				return value;
			}

			/* Find the field descriptor and check its access */
			field = (ILField *)(ILScopeDataGetMember(data));
			if(!ILMemberAccessible((ILMember *)field,
					((ILNode_ClassDefn *)(info->currentClass))->classInfo))
			{
				AccessibilityError((ILNode *)node, node->name,
								   ILField_Owner(field));
			}

			/* Create the final semantic type */
			value.kind = CS_SEMKIND_LVALUE;
			value.type = ILField_Type(field);

			/* Replace this identifier with a field access node */
			if(ILField_IsStatic(field))
			{
				*parent = ILNode_StaticField_create(field);
			}
			else
			{
				*parent = ILNode_MemberField_create
							(ILNode_This_create(), field);
			}
		}
		break;

#if 0
		case IL_SCOPE_METHOD:
		case IL_SCOPE_PROPERTY:
		case IL_SCOPE_EVENT:
		{
			/* Reference to a class member.  Note: if the member
			   is a method, then the first method in the scope with
			   that name is returned.  Higher layers are responsible
			   for resolving the specific method */
			value.kind = CS_SEMKIND_MEMBER;
			value.type = (ILType *)(ILScopeDataGetMember(data));
		}
		break;
#endif

		case IL_SCOPE_LOCAL:
		{
			/* This is a local variable or argument reference */
			index = ILScopeDataGetIndex(data);
			method = (ILNode_MethodDeclaration *)(info->currentMethod);
			if((index & CS_LOCAL_IS_ARG) == 0)
			{
				/* Local variable reference */
				value.type = ILTypeGetLocal(method->localVarSig, index);
				*parent = ILNode_LocalVar_create
							(index, ILTypeToMachineType(value.type));
			}
			else
			{
				/* Argument reference */
				index &= ~CS_LOCAL_IS_ARG;
				if((method->modifiers & IL_META_METHODDEF_STATIC) == 0)
				{
					value.type = ILTypeGetParam
						(ILMethod_Signature(method->methodInfo), index);
				}
				else
				{
					value.type = ILTypeGetParam
						(ILMethod_Signature(method->methodInfo), index + 1);
				}
				*parent = ILNode_ArgumentVar_create
							(index, ILTypeToMachineType(value.type));
			}
			value.kind = CS_SEMKIND_LVALUE;
		}
		break;

		default:
		{
			/* Don't know what to do with this (shouldn't happen) */
			value = CSSemValueDefault;
		}
		break;
	}

	/* Return the final value to the caller */
	return value;
}

/*
 * Perform semantic analysis for qualified identifiers.
 */
ILNode_SemAnalysis(ILNode_QualIdent)
{
	CSSemValue value;
	char *name;

	/* Get the semantic value for the left part of the identifier */
	value = ILNode_SemAnalysis(node->left, info, &(node->left));

	/* Determine how to resolve the right part of the identifier */
	name = ILQualIdentName(node->right, 0);
	switch(value.kind)
	{
		case CS_SEMKIND_LVALUE:
		case CS_SEMKIND_RVALUE:
		{
			/* Looking for an instance member of an object's type */
		}
		break;

		case CS_SEMKIND_TYPE:
		{
			/* Looking for a static member of a type */
		}
		break;

#if 0
		case CS_SEMKIND_SCOPE:
		{
			/* Look in the scope for the name */
		}
		break;
#endif

		default:
		{
			CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
						  "invalid left operand to `.'");
			value = CSSemValueDefault;
		}
		break;
	}

	/* Done */
	return value;
}

/*
 * Perform semantic analysis for local and argument variables.
 */
ILNode_SemAnalysis(ILNode_LocalVar),
ILNode_SemAnalysis(ILNode_ArgumentVar)
{
	/* This should never be called: these node types are
	   synthesised when ILNode_Identifier is analysed */
	return CSSemValueDefault;
}

/*
 * Perform semantic analysis for member access operators.
 */
ILNode_SemAnalysis(ILNode_MemberAccess)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for base member access operators.
 */
ILNode_SemAnalysis(ILNode_BaseAccess)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for base element access operators.
 */
ILNode_SemAnalysis(ILNode_BaseElement)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for an unsafe pointer field dereference.
 */
ILNode_SemAnalysis(ILNode_DerefField)
{
	CSSemValue value;
	CSUnsafeMessage(info, (ILNode *)node, "unsafe field dereference");
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for the synthesised node types used above.
 */
ILNode_SemAnalysis(ILNode_StaticField),
ILNode_SemAnalysis(ILNode_MemberField)
{
	return CSSemValueDefault;
}
