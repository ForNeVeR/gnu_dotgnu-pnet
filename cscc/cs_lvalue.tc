/*
 * cs_lvalue.tc - Semantic analysis for C# identifiers and l-values.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * Perform semantic analysis for the "this" expression.
 */
ILNode_SemAnalysis(ILNode_This)
{
	CSSemValue value;
	ILNode_MethodDeclaration *method;

	/* Find the method declaration */
	method = (ILNode_MethodDeclaration *)(info->currentMethod);

	/* If the method is static, then we cannot use "this" */
	if((method->modifiers & IL_META_METHODDEF_STATIC) != 0)
	{
		CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "cannot use `this' in static methods");
	}

	/* Get the type from the method's class and return */
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_FromClass(ILMethod_Owner(method->methodInfo));
	return value;
}

/*
 * Perform semantic analysis for the "new scope" statement.
 */
ILNode_SemAnalysis(ILNode_NewScope)
{
	CSSemValue value;
	ILScope *savedScope = info->currentScope;
	if(!(node->scope))
	{
		node->scope = ILScopeCreate(info, savedScope);
	}
	info->currentScope = node->scope;
	StmtSem(node->stmt, info, &(node->stmt));
	info->currentScope = savedScope;
	value.kind = CS_SEMKIND_VOID;
	value.type = 0;
	return value;
}

%{

/*
 * Convert a semantic value into an l-value or r-value if necessary.
 */
static CSSemValue SemToLRValue(ILNode *node, ILGenInfo *info, ILNode **parent,
							   CSSemValue value, char *name, ILNode *expr)
{
	ILField *field;
	ILProperty *property;
	ILType *signature;
	ILMethod *getter;
	ILMethod *setter;

	switch(value.kind)
	{
		case CS_SEMKIND_FIELD:
		{
			/* Reference to a class field */
			if(!(info->currentMethod))
			{
				/* We are performing semantic analysis of declarations,
				   which does not permit fields to be used as types */
				CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "`%s' is not declared as a type in the current scope",
					  name);
				value.kind = CS_SEMKIND_TYPE;
				value.type = ILType_Int32;
				return value;
			}

			/* Find the field descriptor */
			field = (ILField *)(value.type);

			/* Create the final semantic type */
			value.kind = CS_SEMKIND_LVALUE;
			value.type = ILField_Type(field);

			/* Replace this identifier with a field access node */
			if(ILField_IsStatic(field))
			{
				*parent = ILNode_StaticField_create(field);
			}
			else if(expr)
			{
				*parent = ILNode_MemberField_create(expr, field);
			}
			else
			{
				*parent = ILNode_MemberField_create
							(ILNode_This_create(), field);
			}
		}
		break;

		case CS_SEMKIND_PROPERTY:
		{
			/* Reference to a class field */
			if(!(info->currentMethod))
			{
				/* We are performing semantic analysis of declarations,
				   which does not permit property to be used as types */
				CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "`%s' is not declared as a type in the current scope",
					  name);
				value.kind = CS_SEMKIND_TYPE;
				value.type = ILType_Int32;
				return value;
			}

			/* Find the property descriptor */
			property = (ILProperty *)(value.type);

			/* Create the final semantic type */
			signature = ILProperty_Signature(property);
			getter = ILProperty_Getter(property);
			setter = ILProperty_Setter(property);
			if(getter != 0)
			{
				if(setter != 0)
				{
					/* Both "get" and "set" are supported */
					value.kind = CS_SEMKIND_LVALUE;
				}
				else
				{
					/* Only "get" is supported */
					value.kind = CS_SEMKIND_RVALUE;
				}
			}
			else if(setter != 0)
			{
				/* Only "set" is supported */
				value.kind = CS_SEMKIND_SVALUE;
			}
			else
			{
				/* Neither "get" nor "set" is supported */
				CSErrorOnLine(yygetfilename(node), yygetlinenum(node),
							  "property has neither `get' nor `set' methods");
				value.kind = CS_SEMKIND_LVALUE;
			}
			value.type = signature->un.method.retType;

			/* Replace this identifier with a property access node */
			if((getter != 0 && ILMethod_IsStatic(getter)) ||
			   (setter != 0 && ILMethod_IsStatic(setter)))
			{
				*parent = ILNode_StaticProperty_create(property);
			}
			else if(expr)
			{
				*parent = ILNode_MemberProperty_create(expr, property);
			}
			else
			{
				*parent = ILNode_MemberProperty_create
							(ILNode_This_create(), property);
			}
		}
		break;

		case CS_SEMKIND_EVENT:
		{
		}
		break;
	}
	return value;
}

%}

/*
 * Perform semantic analysis for singleton identifiers.
 */
ILNode_SemAnalysis(ILNode_Identifier)
{
	CSSemValue value;
	ILScopeData *data;
	unsigned long index;
	ILNode_MethodDeclaration *method;

	/* Look for local variables in the current scope */
	data = ILScopeLookup(info->currentScope, node->name, 1);
	if(data && ILScopeDataGetKind(data) == IL_SCOPE_LOCAL)
	{
		index = ILScopeDataGetIndex(data);
		method = (ILNode_MethodDeclaration *)(info->currentMethod);
		if((index & CS_LOCAL_IS_ARG) == 0)
		{
			/* Local variable reference */
			value.type = ILTypeGetLocal(method->localVarSig, index);
			*parent = ILNode_LocalVar_create
						(index, ILTypeToMachineType(value.type));
		}
		else
		{
			/* Argument reference */
			index &= ~CS_LOCAL_IS_ARG;
			if((method->modifiers & IL_META_METHODDEF_STATIC) == 0)
			{
				value.type = ILTypeGetParam
					(ILMethod_Signature(method->methodInfo), index);
			}
			else
			{
				value.type = ILTypeGetParam
					(ILMethod_Signature(method->methodInfo), index + 1);
			}
			*parent = ILNode_ArgumentVar_create
						(index, ILTypeToMachineType(value.type));
		}
		value.kind = CS_SEMKIND_LVALUE;
		return value;
	}

	/* Resolve the simple name */
	value = CSResolveSimpleName(info, (ILNode *)node, node->name);

	/* Convert the result into an l-value or r-value and return it */
	return SemToLRValue((ILNode *)node, info, parent, value, node->name, 0);
}

/*
 * Perform semantic analysis for qualified identifiers.
 */
ILNode_SemAnalysis(ILNode_QualIdent)
{
	CSSemValue value;
	char *name;

	/* Get the semantic value for the left part of the identifier */
	value = ILNode_SemAnalysis(node->left, info, &(node->left));

	/* Resolve the member */
	name = ILQualIdentName(node->right, 0);
	value = CSResolveMemberName(info, (ILNode *)node, value, name);

	/* Convert the result into an l-value or r-value and return it */
	return SemToLRValue((ILNode *)node, info, parent, value, name, node->left);
}

/*
 * Perform semantic analysis for local and argument variables.
 */
ILNode_SemAnalysis(ILNode_LocalVar),
ILNode_SemAnalysis(ILNode_ArgumentVar)
{
	/* This should never be called: these node types are
	   synthesised when ILNode_Identifier is analysed */
	return CSSemValueDefault;
}

/*
 * Perform semantic analysis for member access operators.
 */
ILNode_SemAnalysis(ILNode_MemberAccess)
{
	CSSemValue value;
	char *name;

	/* Get the semantic value for the left part of the identifier */
	value = ILNode_SemAnalysis(node->expr1, info, &(node->expr1));

	/* Resolve the member */
	name = ILQualIdentName(node->expr2, 0);
	value = CSResolveMemberName(info, (ILNode *)node, value, name);

	/* Convert the result into an l-value or r-value and return it */
	return SemToLRValue((ILNode *)node, info, parent, value, name, node->expr1);
}

/*
 * Perform semantic analysis for base member access operators.
 */
ILNode_SemAnalysis(ILNode_BaseAccess)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for base element access operators.
 */
ILNode_SemAnalysis(ILNode_BaseElement)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for an unsafe pointer field dereference.
 */
ILNode_SemAnalysis(ILNode_DerefField)
{
	CSSemValue value;
	CSUnsafeMessage(info, (ILNode *)node, "unsafe field dereference");
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for the synthesised node types used above.
 */
ILNode_SemAnalysis(ILNode_StaticField),
ILNode_SemAnalysis(ILNode_MemberField),
ILNode_SemAnalysis(ILNode_StaticProperty),
ILNode_SemAnalysis(ILNode_MemberProperty)
{
	return CSSemValueDefault;
}
