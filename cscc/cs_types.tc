/*
 * cs_types.tc - Semantic analysis for C# type nodes.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

%end %{

int CSHasUnsafeType(ILNode *node)
{
	if(!node)
	{
		return 0;
	}
	else if(yykind(node) == yykindof(ILNode_ArrayType))
	{
		return CSHasUnsafeType(((ILNode_ArrayType *)node)->type);
	}
	else if(yykind(node) == yykindof(ILNode_PtrType) ||
	        yykind(node) == yykindof(ILNode_VoidPtrType))
	{
		return 1;
	}
	else if(yykind(node) == yykindof(ILNode_MemberAccess))
	{
		return CSHasUnsafeType(((ILNode_MemberAccess *)node)->expr1);
	}
	else if(yykind(node) == yykindof(ILNode_List))
	{
		ILNode_ListIter iter;
		ILNode *child;
		ILNode_ListIter_Init(&iter, node);
		while((child = ILNode_ListIter_Next(&iter)) != 0)
		{
			if(yykind(child) == yykindof(ILNode_FormalParameter))
			{
				if(CSHasUnsafeType(((ILNode_FormalParameter *)node)->type))
				{
					return 1;
				}
			}
		}
		return 0;
	}
	else
	{
		return 0;
	}
}

%}

/*
 * Perform semantic analysis for array types.
 */
ILNode_SemAnalysis(ILNode_ArrayType)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_VOID;
	value.type = 0;
	return value;
}

/*
 * Perform semantic analysis for pointer types.
 */
ILNode_SemAnalysis(ILNode_PtrType)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_VOID;
	value.type = 0;
	return value;
}

/*
 * Perform semantic analysis for void pointer types.
 */
ILNode_SemAnalysis(ILNode_VoidPtrType)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_VOID;
	value.type = 0;
	return value;
}

/*
 * Perform semantic analysis for the "void" type.
 */
ILNode_SemAnalysis(ILNode_VoidType)
{
	CSSemValue value;
	value.kind = CS_SEMKIND_VOID;
	value.type = 0;
	return value;
}
