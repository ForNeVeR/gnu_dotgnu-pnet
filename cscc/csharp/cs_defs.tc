/*
 * cs_semantics.tc - Semantic analysis routines for C#.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * Inherit the common definitions.
 */
%include %readonly "../../codegen/cg_all.tc"

/*
 * Set a new header for definitions that follow.
 */
%header "cs_defs.h"

/*
 * Copy includes to the top of the "cs_defs.h" file.
 */
%decls %{

#include "../../codegen/cg_nodes.h"
#include "../../codegen/cg_coerce.h"
#include "../../codegen/cg_resolve.h"
#include "../../codegen/cg_scope.h"
#include "../common/cc_preproc.h"
#include "../common/cc_options.h"

/*
 * Define the semantic analysis return type.
 */
typedef struct
{
	int			kind;
	ILType	   *type;

} CSSemValue;
extern CSSemValue CSSemValueDefault;

/*
 * Semantic value kinds.
 */
#define	CS_SEMKIND_VOID				0
#define	CS_SEMKIND_RVALUE			1
#define	CS_SEMKIND_LVALUE			2
#define	CS_SEMKIND_SVALUE			3
#define	CS_SEMKIND_TYPE				4
#define	CS_SEMKIND_FIELD			5
#define	CS_SEMKIND_METHOD_GROUP		6
#define	CS_SEMKIND_PROPERTY			7
#define	CS_SEMKIND_EVENT			8
#define	CS_SEMKIND_NAMESPACE		9
#define	CS_SEMKIND_TYPE_NODE		10
#define	CS_SEMKIND_AMBIGUOUS		11
#define	CS_SEMKIND_INDEXER_GROUP	12

/*
 * Determine if a semantic analysis kind is usable as a value.
 */
#define	CSIsSemValue(kind)	((kind) == CS_SEMKIND_LVALUE || \
							 (kind) == CS_SEMKIND_RVALUE)

%}

%output "cs_nodes.c"

%{
#include "cs_internal.h"
%}

/*
 * Node types that are specific to C#.
 */

/*
 * Dummy node with no semantic analysis.
 */
%node ILNode_DummySem ILNode_Dummy

/*
 * Types.
 */
%node ILNode_ArrayType ILNode_Dummy =
{
	ILNode  *type;
	ILUInt32 numDimensions;
}
%node ILNode_PtrType ILNode_Dummy =
{
	ILNode *type;
}
%node ILNode_PrimitiveType ILNode_Dummy =
{
	ILUInt32 elementType;
}
%node ILNode_ObjectType ILNode_Dummy
%node ILNode_StringType ILNode_Dummy
%node ILNode_DecimalType ILNode_Dummy
%node ILNode_TypeSuffix ILNode_Dummy =
{
	ILUInt32 count;		/* 0 for '*', 1 + for dimension separators */
}
%node ILNode_LocalVariableType ILNode_Dummy =
{
	ILNode *type;
	ILNode *suffixes;
}

/*
 * Misc nodes.
 */
%node ILNode_TypeOf ILNode_UnaryExpression =
{
	%nocreate ILType *type = {0};
}
%node ILNode_SizeOf ILNode_UnaryExpression =
{
	%nocreate ILType *type = {0};
	%nocreate ILInt32 size = {0};
}
%node ILNode_StackAlloc ILNode_BinaryExpression
%node ILNode_UserCast ILNode_DummyBinaryExpr
%node ILNode_IsUntyped ILNode_DummyBinaryExpr
%node ILNode_AsUntyped ILNode_DummyBinaryExpr
%node ILNode_SemGuard ILNode_AsIs =
{
	CSSemValue	value;
}

/*
 * Statements.
 */
%node ILNode_Fixed ILNode_Statement =
{
	ILNode *type;
	ILNode *decls;
	ILNode *stmt;
}
%node ILNode_FixedDeclList ILNode_List
%node ILNode_FixAddress ILNode_Dummy =
{
	char   *name;
	ILNode *address;
}
%node ILNode_FixExpr ILNode_Dummy =
{
	char   *name;
	ILNode *expr;
}
%node ILNode_Using ILNode_Statement =
{
	ILNode *resource;
	ILNode *stmt;
}
%node ILNode_Unsafe ILNode_Statement =
{
	ILNode *stmt;
}

/*
 * Documentation comments.
 */
%node ILNode_DocComment ILNode_Dummy =
{
	char *str;
	int len;
}

/*
 * Namespaces.
 */
%node ILNode_Namespace ILNode_DummySem =
{
	char *name;
	ILNode_Namespace *enclosing;
	%nocreate ILNode_UsingAlias *aliases = {0};
	%nocreate ILNode_UsingNamespace *using = {0};
}
%node ILNode_UsingAlias ILNode_DummySem =
{
	char *name;
	char *ref;
	%nocreate ILClass *classInfo = {0};
	%nocreate ILNode_UsingAlias *next = {0};
}
%node ILNode_UsingNamespace ILNode_DummySem =
{
	char *name;
	%nocreate ILNode_UsingNamespace *next = {0};
}
%node ILNode_GlobalNamespace ILNode_AsIs

/*
 * Include C#-specific definitions.
 */
%include "cs_semantics.tc"
%include "cs_cast.tc"
%include "cs_const.tc"
%include "cs_decls.tc"
%include "cs_lvalue.tc"
%include "cs_misc.tc"
%include "cs_invoke.tc"
%include "cs_oper.tc"
%include "cs_stmt.tc"
%include "cs_types.tc"
