/*
 * cs_lvalue.tc - Semantic analysis for C# identifiers and l-values.
 *
 * Copyright (C) 2001, 2002  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

%{

/*
 * Check to see if we are permitted to use the "this" expression
 * to access an instance member.
 */
static void CheckForInstanceAccess(ILGenInfo *info, ILNode *node)
{
	ILNode_MethodDeclaration *caller;
	caller = (ILNode_MethodDeclaration *)(info->currentMethod);
	if(!caller || (caller->modifiers & IL_META_METHODDEF_STATIC) != 0)
	{
		CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "cannot access instance members in static methods");
	}
}

%}

/*
 * Perform semantic analysis for the "this" expression.
 */
ILNode_SemAnalysis(ILNode_This)
{
	CSSemValue value;
	ILNode_MethodDeclaration *method;

	/* Find the method declaration */
	method = (ILNode_MethodDeclaration *)(info->currentMethod);

	/* If the method is static, then we cannot use "this" */
	if((method->modifiers & IL_META_METHODDEF_STATIC) != 0)
	{
		CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "cannot use `this' in static methods");
	}

	/* Get the type from the method's class and return */
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_FromClass(ILMethod_Owner(method->methodInfo));
	return value;
}

/*
 * Perform semantic analysis for the "new scope" statement.
 */
ILNode_SemAnalysis(ILNode_NewScope)
{
	CSSemValue value;
	ILScope *savedScope = info->currentScope;
	if(!(node->scope))
	{
		node->scope = ILScopeCreate(info, savedScope);
	}
	info->currentScope = node->scope;
	StmtSem(node->stmt, info, &(node->stmt));
	info->currentScope = savedScope;
	value.kind = CS_SEMKIND_VOID;
	value.type = 0;
	return value;
}

%{

/*
 * Convert a field into a literal constant node if possible.
 * Returns NULL if not possible.
 */
static ILNode *FieldToConstant(ILGenInfo *info, ILNode *node, ILField *field)
{
	ILConstant *constValue;
	if(ILField_IsLiteral(field))
	{
		if((constValue = ILConstantGetFromOwner(ILToProgramItem(field))) != 0)
		{
			/* Convert the constant into an appropriate node */
			ILType *baseType = ILTypeGetEnumType(ILField_Type(field));
			const unsigned char *value;
			unsigned long valueLen;
			value = ILConstantGetValue(constValue, &valueLen);
			switch(ILConstantGetElemType(constValue))
			{
				case IL_META_ELEMTYPE_BOOLEAN:
				{
					/* Create a boolean constant */
					if(value && valueLen > 0 && baseType == ILType_Boolean)
					{
						if(value[0])
						{
							return ILNode_True_create();
						}
						else
						{
							return ILNode_False_create();
						}
					}
				}
				break;

				case IL_META_ELEMTYPE_I1:
				case IL_META_ELEMTYPE_U1:
				{
					/* Create an 8-bit constant */
					if(value && valueLen > 0)
					{
						if(baseType == ILType_Int8)
						{
							ILInt8 val = (ILInt8)(value[0]);
							if(val >= 0)
							{
								return ILNode_Int8_create
									((ILUInt64)(-((ILInt32)val)), 1, 0);
							}
							else
							{
								return ILNode_Int8_create
									((ILUInt64)val, 0, 0);
							}
						}
						else if(baseType == ILType_UInt8)
						{
							return ILNode_UInt8_create
								((ILUInt64)(value[0]), 0, 0);
						}
					}
				}
				break;

				case IL_META_ELEMTYPE_I2:
				case IL_META_ELEMTYPE_U2:
				{
					/* Create a 16-bit constant */
					if(value && valueLen > 1)
					{
						if(baseType == ILType_Int16)
						{
							ILInt16 val = (ILInt16)(IL_READ_INT16(value));
							if(val >= 0)
							{
								return ILNode_Int16_create
									((ILUInt64)(-((ILInt32)val)), 1, 0);
							}
							else
							{
								return ILNode_Int16_create
									((ILUInt64)val, 0, 0);
							}
						}
						else if(baseType == ILType_UInt16)
						{
							return ILNode_UInt16_create
								((ILUInt64)(IL_READ_UINT16(value)), 0, 0);
						}
					}
				}
				break;

				case IL_META_ELEMTYPE_CHAR:
				{
					/* Create a character constant */
					if(value && valueLen > 1)
					{
						if(baseType == ILType_Char)
						{
							return ILNode_Char_create
								((ILUInt64)(IL_READ_UINT16(value)), 0, 0);
						}
					}
				}
				break;

				case IL_META_ELEMTYPE_I4:
				case IL_META_ELEMTYPE_U4:
				{
					/* Create a 32-bit constant */
					if(value && valueLen > 3)
					{
						if(baseType == ILType_Int32)
						{
							ILInt32 val = IL_READ_INT32(value);
							if(val >= 0)
							{
								return ILNode_Int32_create
									((ILUInt64)(ILUInt32)(-val), 1, 0);
							}
							else
							{
								return ILNode_Int32_create
									((ILUInt64)val, 0, 0);
							}
						}
						else if(baseType == ILType_UInt32)
						{
							return ILNode_UInt32_create
								((ILUInt64)(IL_READ_UINT32(value)), 0, 0);
						}
					}
				}
				break;

				case IL_META_ELEMTYPE_I8:
				case IL_META_ELEMTYPE_U8:
				{
					/* Create a 64-bit constant */
					if(value && valueLen > 7)
					{
						if(baseType == ILType_Int64)
						{
							ILInt64 val = IL_READ_INT64(value);
							if(val >= 0)
							{
								return ILNode_Int64_create
									((ILUInt64)(-val), 1, 0);
							}
							else
							{
								return ILNode_Int64_create
									((ILUInt64)val, 0, 0);
							}
						}
						else if(baseType == ILType_UInt64)
						{
							return ILNode_UInt64_create
								(IL_READ_UINT64(value), 0, 0);
						}
					}
				}
				break;

				case IL_META_ELEMTYPE_R4:
				{
					/* Create a 32-bit floating-point constant */
					if(value && valueLen > 3)
					{
						if(baseType == ILType_Float32)
						{
							return ILNode_Float32_create
								(IL_READ_FLOAT(value));
						}
					}
				}
				break;

				case IL_META_ELEMTYPE_R8:
				{
					/* Create a 64-bit floating-point constant */
					if(value && valueLen > 7)
					{
						if(baseType == ILType_Float64)
						{
							return ILNode_Float64_create
								(IL_READ_DOUBLE(value));
						}
					}
				}
				break;

				case IL_META_ELEMTYPE_STRING:
				{
					/* Create a string constant */
					if(value && ILTypeIsStringClass(baseType))
					{
						int posn = 0;
						int len = 0;
						char *newStr;
						ILIntString interned;
						while(posn < (int)valueLen)
						{
							len += ILUTF8WriteChar
							  (0, ILUTF16ReadCharAsBytes
								((const char *)value, (int)valueLen, &posn));
						}
						newStr = (char *)ILMalloc(len + 1);
						if(!newStr)
						{
							CCOutOfMemory();
						}
						posn = 0;
						len = 0;
						while(posn < (int)valueLen)
						{
							len += ILUTF8WriteChar
							  (newStr + len, ILUTF16ReadCharAsBytes
								((const char *)value, (int)valueLen, &posn));
						}
						interned = ILInternString(newStr, len);
						ILFree(newStr);
						return ILNode_String_create(interned.string,
													interned.len);
					}
				}
				break;

				case IL_META_ELEMTYPE_CLASS:
				{
					/* Create a "null" constant */
					if(value &&
					   ((valueLen == 4 && IL_READ_UINT32(value) == 0) ||
					    (valueLen == 8 && IL_READ_UINT64(value) == 0)))
					{
						if(ILTypeAssignCompatible(info->image, 0, baseType))
						{
							return ILNode_Null_create();
						}
					}
				}
				break;
			}

			/* If we get here, then the constant is not compatible
			   with the type of the field */
			CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
						  "literal field has an incorrect constant value");
			return 0;
		}
		else if(ILField_IsLiteral(field) &&
		        ILTypeIsStringClass(ILField_Type(field)))
		{
			/* Sometimes the empty string constant is stored as a literal
			   field with no value associated with it */
			return ILNode_String_create(ILInternString("", 0).string, 0);
		}
		else
		{
			/* This is a literal without an actual constant value */
			CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
						  "literal field does not have a constant value");
			return 0;
		}
	}
	else if(ILField_IsInitOnly(field))
	{
		/* Check for "DecimalConstantAttribute" values, which are
		   attached to "readonly" fields of type "System.Decimal" */
		ILType *decimalType = ILFindSystemType(info, "Decimal");
		if(ILTypeIdentical(decimalType, ILField_Type(field)))
		{
			ILAttribute *attr = 0;
			ILMethod *ctor;
			const char *namespace;
			const unsigned char *value;
			unsigned long valueLen;
			ILDecimal decValue;

			while((attr = ILProgramItemNextAttribute(ILToProgramItem(field),
													 attr)) != 0)
			{
				ctor = ILProgramItemToMethod(ILAttributeTypeAsItem(attr));
				if(ctor && !strcmp(ILMethod_Name(ctor), ".ctor") &&
				   !strcmp(ILClass_Name(ILMethod_Owner(ctor)),
				   		   "DecimalConstantAttribute"))
				{
					namespace = ILClass_Namespace(ILMethod_Owner(ctor));
					if(namespace &&
					   !strcmp(namespace, "System.Runtime.CompilerServices"))
					{
						value = (const unsigned char *)
							ILAttributeGetValue(attr, &valueLen);
						if(value && valueLen == 18 &&
						   value[0] == 0x01 && value[1] == 0x00 &&
						   value[2] < 29 && (value[3] == 0x00 ||
						   					 value[3] == 0x80))
						{
							decValue.flags =
								(((ILUInt32)(value[2])) << 16) |
								(((ILUInt32)(value[3])) << 24);
							decValue.high = IL_READ_UINT32(value + 4);
							decValue.middle = IL_READ_UINT32(value + 8);
							decValue.low = IL_READ_UINT32(value + 12);
							return ILNode_Decimal_create(decValue);
						}
					}
				}
			}
		}

		/* Load the contents of the read-only field using regular techniques */
		return 0;
	}
	else
	{
		/* Regular static field */
		return 0;
	}
}

/*
 * Convert a semantic value into an l-value or r-value if necessary.
 */
static CSSemValue SemToLRValue(ILNode *node, ILGenInfo *info, ILNode **parent,
							   CSSemValue value, char *name, ILNode *expr,
							   CSSemValue *exprSem)
{
	ILField *field;
	ILProperty *property;
	ILType *signature;
	ILMethod *getter;
	ILMethod *setter;
	ILNode *constNode;
	ILMethod *method;
	int allowConst;

	switch(value.kind)
	{
		case CS_SEMKIND_FIELD:
		{
			/* Reference to a class field */
			field = (ILField *)(value.type);
			if(!(info->currentMethod))
			{
				/* We are performing semantic analysis of declarations,
				   where only literals and types are allowed */
				if(!ILField_IsStatic(field) || !ILField_IsLiteral(field))
				{
					CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "`%s' is not declared as a type in the current scope",
					  name);
					value.kind = CS_SEMKIND_TYPE;
					value.type = ILType_Int32;
					return value;
				}
			}

			/* Create the final semantic type */
			value.kind = CS_SEMKIND_LVALUE;
			value.type = ILField_Type(field);

			/* Check the usage of "readonly" fields */
			allowConst = 1;
			if(ILField_IsInitOnly(field))
			{
				method = ((ILNode_MethodDeclaration *)(info->currentMethod))
							->methodInfo;
				if(method && CSGetAccessScope(info, 1) == ILField_Owner(field))
				{
					/* The field is being used inside the class */
					if(ILField_IsStatic(field) &&
					   ILMethodIsStaticConstructor(method))
					{
						/* Static readonly used within static constructor */
						allowConst = 0;
					}
					else if(!ILField_IsStatic(field) &&
					        ILMethodIsConstructor(method))
					{
						/* Instance readonly used within instance constructor.
						   Nothing needs to be done here */
					}
					else
					{
						/* The field is used elsewhere, so make it an r-value */
						value.kind = CS_SEMKIND_RVALUE;
					}
				}
				else
				{
					/* The field is used elsewhere, so make it an r-value */
					value.kind = CS_SEMKIND_RVALUE;
				}
			}

			/* Replace this identifier with a field access node */
			if(ILField_IsStatic(field))
			{
				/* Convert the field into a constant node if possible */
				if(allowConst &&
				   (constNode = FieldToConstant(info, node, field)) != 0)
				{
					*parent = constNode;
					value.kind = CS_SEMKIND_RVALUE;
				}
				else
				{
					*parent = ILNode_StaticField_create(field);
				}
			}
			else if(expr)
			{
				*parent = ILNode_MemberField_create(expr, field);
			}
			else
			{
				CheckForInstanceAccess(info, node);
				*parent = ILNode_MemberField_create
							(ILNode_This_create(), field);
			}
		}
		break;

		case CS_SEMKIND_METHOD_GROUP:
		{
			/* Reference to a method group */
			if(!(info->currentMethod))
			{
				/* We are performing semantic analysis of declarations,
				   which does not permit methods to be used as types */
				CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "`%s' is not declared as a type in the current scope",
					  name);
				value.kind = CS_SEMKIND_TYPE;
				value.type = ILType_Int32;
				return value;
			}

			/* Replace the node with either the object expression or "this" */
			if(expr)
			{
				if(CSIsSemValue(exprSem->kind) &&
				   !ILTypeIsReference(exprSem->type))
				{
					/* Make sure that the object expression is an object */
					if(!ILCoerce(info, expr, parent, exprSem->type,
								 ILFindSystemType(info, "Object")))
					{
						*parent = expr;
					}
				}
				else
				{
					*parent = expr;
				}
			}
			else
			{
				*parent = ILNode_This_create();
			}
		}
		break;

		case CS_SEMKIND_PROPERTY:
		{
			/* Reference to a class field */
			if(!(info->currentMethod))
			{
				/* We are performing semantic analysis of declarations,
				   which does not permit properties to be used as types */
				CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "`%s' is not declared as a type in the current scope",
					  name);
				value.kind = CS_SEMKIND_TYPE;
				value.type = ILType_Int32;
				return value;
			}

			/* Find the property descriptor */
			property = (ILProperty *)(value.type);

			/* Create the final semantic type */
			signature = ILProperty_Signature(property);
			getter = ILProperty_Getter(property);
			setter = ILProperty_Setter(property);
			if(getter != 0)
			{
				if(setter != 0)
				{
					/* Both "get" and "set" are supported */
					value.kind = CS_SEMKIND_LVALUE;
				}
				else
				{
					/* Only "get" is supported */
					value.kind = CS_SEMKIND_RVALUE;
				}
			}
			else if(setter != 0)
			{
				/* Only "set" is supported */
				value.kind = CS_SEMKIND_SVALUE;
			}
			else
			{
				/* Neither "get" nor "set" is supported */
				CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
							  "property has neither `get' nor `set' methods");
				value.kind = CS_SEMKIND_LVALUE;
			}
			value.type = ILTypeGetReturn(signature);

			/* Replace this identifier with a property access node */
			if((getter != 0 && ILMethod_IsStatic(getter)) ||
			   (setter != 0 && ILMethod_IsStatic(setter)))
			{
				*parent = ILNode_StaticProperty_create(property);
			}
			else if(expr)
			{
				*parent = ILNode_MemberProperty_create(expr, property);
			}
			else
			{
				CheckForInstanceAccess(info, node);
				*parent = ILNode_MemberProperty_create
							(ILNode_This_create(), property);
			}
		}
		break;

		case CS_SEMKIND_EVENT:
		{
			/* TODO */
		}
		break;
	}
	return value;
}

%}

/*
 * Perform semantic analysis for singleton identifiers.
 */
ILNode_SemAnalysis(ILNode_Identifier)
{
	CSSemValue value;
	ILScopeData *data;
	unsigned long index;
	ILNode_MethodDeclaration *method;
	ILParameterModifier paramMod;

	/* Look for local variables in the current scope */
	data = ILScopeLookup(info->currentScope, node->name, 1);
	if(data && ILScopeDataGetKind(data) == IL_SCOPE_LOCAL)
	{
		index = ILScopeDataGetIndex(data);
		method = (ILNode_MethodDeclaration *)(info->currentMethod);
		if((index & CS_LOCAL_IS_ARG) == 0)
		{
			/* Local variable reference */
			value.type = ILTypeGetLocal(method->localVarSig, index);
			*parent = ILNode_LocalVar_create
						(index, ILTypeToMachineType(value.type));
		}
		else
		{
			/* Argument reference */
			index &= ~CS_LOCAL_IS_ARG;
			if((method->modifiers & IL_META_METHODDEF_STATIC) == 0)
			{
				paramMod = ILGenGetParamInfo(method->methodInfo, 0,
											 index, &(value.type));
			}
			else
			{
				paramMod = ILGenGetParamInfo(method->methodInfo, 0,
											 index + 1, &(value.type));
			}
			if(paramMod == ILParamMod_ref)
			{
				/* Handle by-reference parameters */
				*parent = ILNode_RefArgumentVar_create
					(index, ILTypeToMachineType(value.type), value.type);
			}
			else if(paramMod == ILParamMod_out)
			{
				/* Handle output-only parameters */
				*parent = ILNode_RefArgumentVar_create
					(index, ILTypeToMachineType(value.type), value.type);
				value.kind = CS_SEMKIND_SVALUE;
				return value;
			}
			else
			{
				*parent = ILNode_ArgumentVar_create
							(index, ILTypeToMachineType(value.type));
			}
		}
		value.kind = CS_SEMKIND_LVALUE;
		return value;
	}

	/* Resolve the simple name */
	value = CSResolveSimpleName(info, (ILNode *)node, node->name);

	/* Convert the result into an l-value or r-value and return it */
	return SemToLRValue((ILNode *)node, info, parent, value, node->name, 0, 0);
}

/*
 * Perform semantic analysis for qualified identifiers.
 */
ILNode_SemAnalysis(ILNode_QualIdent)
{
	CSSemValue value;
	CSSemValue value2;
	char *name;

	/* Get the semantic value for the left part of the identifier */
	value = ILNode_SemAnalysis(node->left, info, &(node->left));

	/* Resolve the member */
	name = ILQualIdentName(node->right, 0);
	value2 = CSResolveMemberName(info, (ILNode *)node, value, name);

	/* Convert the result into an l-value or r-value and return it */
	return SemToLRValue((ILNode *)node, info, parent, value2,
						name, node->left, &value);
}

/*
 * Perform semantic analysis for local and argument variables.
 */
ILNode_SemAnalysis(ILNode_LocalVar),
ILNode_SemAnalysis(ILNode_ArgumentVar),
ILNode_SemAnalysis(ILNode_RefArgumentVar)
{
	/* This should never be called: these node types are
	   synthesised when ILNode_Identifier is analysed */
	return CSSemValueDefault;
}

/*
 * Perform semantic analysis for member access operators.
 */
ILNode_SemAnalysis(ILNode_MemberAccess)
{
	CSSemValue value;
	CSSemValue value2;
	char *name;

	/* Get the semantic value for the left part of the identifier */
	value = ILNode_SemAnalysis(node->expr1, info, &(node->expr1));

	/* Resolve the member */
	name = ILQualIdentName(node->expr2, 0);
	value2 = CSResolveMemberName(info, (ILNode *)node, value, name);

	/* Convert the result into an l-value or r-value and return it */
	return SemToLRValue((ILNode *)node, info, parent, value2,
					    name, node->expr1, &value);
}

/*
 * Perform semantic analysis for base member access operators.
 */
ILNode_SemAnalysis(ILNode_BaseAccess)
{
	/* TODO */
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for base element access operators.
 */
ILNode_SemAnalysis(ILNode_BaseElement)
{
	/* TODO */
	CSSemValue value;
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

/*
 * Perform semantic analysis for an unsafe pointer field dereference.
 */
ILNode_SemAnalysis(ILNode_DerefField)
{
	/* TODO */
	CSSemValue value;
	CCUnsafeMessage(info, (ILNode *)node, "unsafe field dereference");
	value.kind = CS_SEMKIND_RVALUE;
	value.type = ILType_Int32;
	return value;
}

%{

/*
 * Wrap an array index expression in an overflow conversion to "int".
 */
static ILNode *ArrayIndexToInt(ILGenInfo *info, ILNode *node,
							   ILNode **parent, ILType *currentType)
{
	ILNode *result;
	if(info->overflowInsns)
	{
		/* We are already in overflow mode, so just wrap it */
		result = ILNode_CastSimple_create(node, ILMachineType_Int32);
	}
	else
	{
		/* The index is not being computed in overflow mode,
		   but we want an overflow conversion for the cast */
		result = ILNode_Overflow_create
					(ILNode_CastSimple_create
						(ILNode_NoOverflow_create(node), ILMachineType_Int32));
	}
	*parent = result;
	return result;
}

%}

/*
 * Perform semantic analysis for an array access operation.
 */
ILNode_SemAnalysis(ILNode_ArrayAccess)
{
	CSSemValue value;
	CSSemValue indexers;
	CSEvalArg *args;
	int numArgs, argNum;
	unsigned long itemNum;
	ILProgramItem *itemInfo;
	int candidateForm;
	ILMethod *getMethod;
	ILMethod *setMethod;
	ILType *objectType;

	/* Perform semantic analysis on the array expression */
	if(!CSSemExpectValue(node->array, info, &(node->array), &value))
	{
		CCErrorOnLine(yygetfilename(node->array), yygetlinenum(node->array),
					  "array or indexed value expected");
		value.kind = CS_SEMKIND_LVALUE;
		value.type = ILType_Int32;
		return value;
	}

	/* Perform semantic analysis on the index argument list */
	numArgs = CSEvalArguments(info, node->indices, &(node->indices), &args);
	if(numArgs < 0)
	{
		value.kind = CS_SEMKIND_LVALUE;
		value.type = ILType_Int32;
		return value;
	}

	/* Is this an array element or an indexer access? */
	if(ILType_IsArray(value.type))
	{
		/* All arguments must be coercable to one of "int", "uint",
		   "long", or "ulong", and are converted to "int" */
		for(argNum = 0; argNum < numArgs; ++argNum)
		{
			if(ILCoerce(info, args[argNum].node, args[argNum].parent,
			            args[argNum].type, ILType_Int32))
			{
				args[argNum].node = *(args[argNum].parent);
			}
			else if(ILCoerce(info, args[argNum].node, args[argNum].parent,
			                 args[argNum].type, ILType_UInt32))
			{
				args[argNum].node =
					ArrayIndexToInt(info, *(args[argNum].parent),
									args[argNum].parent, ILType_UInt32);
			}
			else if(ILCoerce(info, args[argNum].node, args[argNum].parent,
			                 args[argNum].type, ILType_Int64))
			{
				args[argNum].node =
					ArrayIndexToInt(info, *(args[argNum].parent),
									args[argNum].parent, ILType_Int64);
			}
			else if(ILCoerce(info, args[argNum].node, args[argNum].parent,
			                 args[argNum].type, ILType_UInt64))
			{
				args[argNum].node =
					ArrayIndexToInt(info, *(args[argNum].parent),
									args[argNum].parent, ILType_UInt64);
			}
			else
			{
				CCErrorOnLine(yygetfilename(args[argNum].node),
							  yygetlinenum(args[argNum].node),
							  "no conversion from `%s' to `int'",
							  CSTypeToName(args[argNum].type));
			}
		}

		/* Check the array's rank */
		if(numArgs != ILTypeGetRank(value.type))
		{
			CCErrorOnLine(yygetfilename(node->indices),
						  yygetlinenum(node->indices),
						  "incorrect number of indices for `%s'",
						  CSTypeToName(value.type));
		}

		/* Store the type information in the node for the code generator */
		node->arrayType = value.type;
		node->elemType = ILTypeGetElemType(value.type);

		/* Construct the semantic value for the element type */
		value.kind = CS_SEMKIND_LVALUE;
		value.type = node->elemType;
	}
	else if(ILType_IsClass(value.type) || ILType_IsValueType(value.type))
	{
		/* Resolve the indexer for this type */
		objectType = value.type;
		indexers = CSResolveIndexers(info, (ILNode *)node,
									 ILType_ToClass(value.type));
		if(indexers.kind == CS_SEMKIND_INDEXER_GROUP)
		{
			/* Scan through the indexer group looking for something
			   that is applicable to the expression list */
			itemNum = 0;
			while((itemInfo = CSGetGroupMember
						((void *)(indexers.type), itemNum)) != 0)
			{
				candidateForm = CSItemIsCandidate
						(info, itemInfo, args, numArgs);
				if(candidateForm)
				{
					CSSetGroupMemberForm((void *)(indexers.type), itemNum,
										 candidateForm);
					++itemNum;
				}
				else
				{
					indexers.type = (ILType *)CSRemoveGroupMember
										((void *)(indexers.type), itemNum);
				}
			}

			/* If there are no candidates left, then bail out */
			itemNum = 0;
			itemInfo = CSGetGroupMember((void *)(indexers.type), itemNum);
			if(!itemInfo)
			{
				CSItemCandidateError((ILNode *)node, 0, 0,
								     (void *)(indexers.type), args, numArgs);
				CSEvalFreeArguments(args);
				return value;
			}

			/* If there are two or more candidates, then try to
			   find the best one */
			if(CSGetGroupMember((void *)(indexers.type), 1) != 0)
			{
				itemInfo = CSBestCandidate(info, (void *)(indexers.type),
										   args, numArgs);
				if(!itemInfo)
				{
					CSItemCandidateError((ILNode *)node, 0, 0,
									     (void *)(indexers.type),
										 args, numArgs);
					CSEvalFreeArguments(args);
					return value;
				}
			}

			/* Locate the "get" and "set" methods for the indexer */
			getMethod = ILProperty_Getter((ILProperty *)itemInfo);
			setMethod = ILProperty_Setter((ILProperty *)itemInfo);

			/* Determine the semantic kind for the value */
			if(getMethod && setMethod)
			{
				value.kind = CS_SEMKIND_LVALUE;
			}
			else if(getMethod)
			{
				value.kind = CS_SEMKIND_RVALUE;
			}
			else if(setMethod)
			{
				value.kind = CS_SEMKIND_SVALUE;
			}
			else
			{
				CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
							  "indexer does not have `get' or `set' accessors");
				value.kind = CS_SEMKIND_LVALUE;
			}

			/* Import the methods into this image */
			if(getMethod)
			{
				getMethod = (ILMethod *)ILMemberImport
						(info->image, (ILMember *)getMethod);
			}
			if(setMethod)
			{
				setMethod = (ILMethod *)ILMemberImport
						(info->image, (ILMember *)setMethod);
			}

			/* Coerce the arguments and build the final argument list */
			value.type = CSItemCoerceArgs
						(info, ILToProgramItem(itemInfo),
						 args, numArgs, &(node->indices));

			/* Replace this node with an indexer access node */
			*parent = ILNode_IndexerAccess_create
					(node->array, node->indices, getMethod, setMethod,
					 objectType, value.type, ILTypeToMachineType(value.type));
		}
		else
		{
			/* No indexers are defined for this type */
			CCErrorOnLine(yygetfilename(node->array), yygetlinenum(node->array),
						  "array or indexed value expected");
			value.kind = CS_SEMKIND_LVALUE;
			value.type = ILType_Int32;
		}
	}
	else
	{
		/* Not an appropriate value for array or indexer access */
		CCErrorOnLine(yygetfilename(node->array), yygetlinenum(node->array),
					  "array or indexed value expected");
		value.kind = CS_SEMKIND_LVALUE;
		value.type = ILType_Int32;
	}

	/* Free the argument list and return the element type */
	CSEvalFreeArguments(args);
	return value;
}

/*
 * Perform semantic analysis for the synthesised node types used above.
 */
ILNode_SemAnalysis(ILNode_StaticField),
ILNode_SemAnalysis(ILNode_MemberField),
ILNode_SemAnalysis(ILNode_StaticProperty),
ILNode_SemAnalysis(ILNode_MemberProperty),
ILNode_SemAnalysis(ILNode_IndexerAccess)
{
	return CSSemValueDefault;
}
