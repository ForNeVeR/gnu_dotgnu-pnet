%output "cs_semantics.c"

%{
/*
 * cs_semantics.tc - Semantic analysis routines for C#.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include <cscc/csharp/cs_internal.h>
%}

/*
 * Semantic analysis operation.  "parent" points to the location
 * that should be overwritten if the node is being replaced.
 */
%operation CSSemValue ILNode_SemAnalysis([ILNode *node], ILGenInfo *info,
									     ILNode **parent) = {CSSemValueDefault}

/*
 * Stub for dummy semantic analysis routines.
 */
ILNode_SemAnalysis(ILNode_DummySem)
{
	return CSSemValueDefault;
}

%decls %end %{

/*
 * Create a type for a built-in class or value type.
 */
/*
ILType *CSCreateClassType(CSSemContext *sctx, const char *namespace,
						  const char *name);
ILType *CSCreateValueType(CSSemContext *sctx, const char *namespace,
						  const char *name);
*/

/*
 * Perform semantic analysis on a type.  This is
 * guaranteed to always return a correct type value.
 * The "void" type will produce an error, if present.
 */
ILType *CSSemType(ILNode *type, ILGenInfo *info, ILNode **parent);

/*
 * Perform semantic analysis on a type that can also
 * include the "void" type.
 */
ILType *CSSemTypeVoid(ILNode *type, ILGenInfo *info, ILNode **parent);

/*
 * Perform semantic analysis on a base type.  Returns
 * zero if not a legal base type.
 */
int CSSemBaseType(ILNode *type, ILGenInfo *info, ILNode **parent,
				  ILNode **baseNode, ILClass **baseClass);

/*
 * Perform semantic analysis on a node and expect a value.
 * Returns non-zero if a value, or zero on error.
 */
int CSSemExpectValue(ILNode *node, ILGenInfo *info,
					 ILNode **parent, CSSemValue *value);

%}

%{

/*
 * Default value that is returned from "ILNode_SemAnalysis".
 */
CSSemValue CSSemValueDefault = {CS_SEMKIND_VOID, 0};

%}

%end %{

ILType *CSSemType(ILNode *type, ILGenInfo *info, ILNode **parent)
{
	ILType *resultType = CSSemTypeVoid(type, info, parent);
	if(resultType == ILType_Void)
	{
		CCErrorOnLine(yygetfilename(type), yygetlinenum(type),
					  "`void' type is not allowed in this context");
		resultType = ILType_Int32;
	}
	return resultType;
}

ILType *CSSemTypeVoid(ILNode *type, ILGenInfo *info, ILNode **parent)
{
	CSSemValue value;
	int save;
	if(type)
	{
		save = info->inSemType;
		info->inSemType = info->typeGather;
		value = ILNode_SemAnalysis(type, info, parent);
		info->inSemType = save;
		if(value.kind != CS_SEMKIND_TYPE)
		{
			CCErrorOnLine(yygetfilename(type), yygetlinenum(type),
						  "invalid type specification");
			return ILType_Int32;
		}
		else
		{
			return value.type;
		}
	}
	else
	{
		/* NULL is used in some places in the grammar to indicate "void" */
		return ILType_Void;
	}
}

int CSSemBaseType(ILNode *type, ILGenInfo *info, ILNode **parent,
				  ILNode **baseNode, ILClass **baseClass)
{
	CSSemValue value;
	int save = info->inSemType;
	info->inSemType = info->typeGather;
	value = ILNode_SemAnalysis(type, info, parent);
	info->inSemType = save;
	if(value.kind == CS_SEMKIND_TYPE)
	{
		*baseNode = 0;
		*baseClass = ILTypeToClass(info, value.type);
		return (*baseClass != 0);
	}
	else if(value.kind == CS_SEMKIND_TYPE_NODE)
	{
		*baseNode = (ILNode *)(value.type);
		*baseClass = 0;
		return 1;
	}
	else
	{
		return 0;
	}
}

int CSSemExpectValue(ILNode *node, ILGenInfo *info,
					 ILNode **parent, CSSemValue *value)
{
	*value = ILNode_SemAnalysis(node, info, parent);
	return (value->kind == CS_SEMKIND_RVALUE ||
			value->kind == CS_SEMKIND_LVALUE);
}

%}
