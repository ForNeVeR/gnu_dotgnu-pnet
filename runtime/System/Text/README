This directory provides support for various character set encodings,
based around the Windows "code page" concept.  The following is a short
tour of the main encoding classes:

	Encoding

		The base class for all encoding handlers.

	ASCIIEncoding

		Handles the "us-ascii" encoding.

	DefaultEncoding

		Internal class that handles the default encoding.  The runtime
		engine provides this encoding when it doesn't otherwise support
		code pages.

	Latin1Encoding

		Internal class that handles the "iso-8859-1" encoding.

	UTF7Encoding

		Handles the "utf-7" encoding.

	UTF8Encoding

		Handles the "utf-8" encoding.

	UnicodeEncoding

		Handles the "utf-16" encoding in little-endian and big-endian forms.

	CPnnnn

		Code page handler for Windows code page "nnnn".  See below.

	ENCname

		Encoding handler for Web encoding "name".  See below.

	ByteEncoding

		Abstract base class that is used by many of the "CPnnnn" classes
		to provide common encoding functionality.

	ISCIIEncoding

		Abstract base class that is used by the "CP570XX" classes to
		provide common functionality for ISCII code pages.

	CodeTable.cs

		Loads large translation tables from the assembly's resource
		section.  Used with CJK classes like "JISConvert".

	JISConvert.cs

		Manages tables for converting between JIS and Unicode.

The method "DefaultEncoding.InternalCodePage()" is used to detect the
default code page supported by the runtime engine.  This method may
return 0 if there is no way for the engine to obtain a valid number.

It is possible to create your own code page and encoding handlers to
extend the set above.

Create a "private" class called "System.Text.CPnnnn" that inherits from
"Encoding" where "nnnn" is the code page number.  The lookup method
"Encoding.GetEncoding(int)" function will detect this class and create
an instance of it.

Also create a "private" class called "System.Text.ENCname" that inherits
from "System.Text.CPnnnn", where "name" is the lower-case version of the
Web encoding name.  This will be returned by "Encoding.GetEncoding(String)".

For example, to handle code page 20866 [Cyrillic (KOI8-R)], create the
class "System.Text.CP20866" to handle the code page and the subclass
"System.Text.ENCkoi8_r" to handle the web encoding:

	namespace System.Text
	{
		internal class CP20866 : Encoding
		{
			...
		}

		internal class ENCkoi8_r : CP20866
		{
			public ENCkoi8_r() : base() {}
		}
	}

The "ENCname" class will typically be empty: it exists purely as a naming
convenience to redirect "Encoding.GetEncoding(String)" to the correct
code page implementation.

A number of standard Windows code pages have been supplied.  They were
generated from the "*.ucm" files in this directory using the "ucm2cp"
program.  These files originally came from IBM's "ICU" project.

To regenerate the code page handlers from the "*.ucm" files, use the
"cvt.sh" script.  If you supply the "--include-rare" option to "cvt.sh",
it will add a number of rare DOS and EBCDIC code pages to the system.

Currently, "ucm2cp" can only handle single-byte character sets.  The
double-byte character sets are too complex to be handled using the
simple code conversion technique used by "ByteEncoding".  Support for
double-byte character sets must be coded manually (e.g. "CP932.cs").
